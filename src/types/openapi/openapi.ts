/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the avatar of a room */
        get: operations["avatar-get-avatar"];
        put?: never;
        /** Upload an avatar for a room */
        post: operations["avatar-upload-avatar"];
        /** Delete the avatar of a room */
        delete: operations["avatar-delete-avatar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar/emoji": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set an emoji as avatar */
        post: operations["avatar-emoji-avatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar/dark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the dark mode avatar of a room */
        get: operations["avatar-get-avatar-dark"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/ban/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the bans of a conversation
         * @description Required capability: `ban-v1`
         */
        get: operations["ban-list-bans"];
        put?: never;
        /**
         * Ban an actor or IP address
         * @description Required capability: `ban-v1`
         */
        post: operations["ban-ban-actor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/ban/{token}/{banId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unban an actor or IP address
         * @description Required capability: `ban-v1`
         */
        delete: operations["ban-unban-actor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List bots */
        get: operations["bot-list-bots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}/{botId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enables a bot */
        post: operations["bot-enable-bot"];
        /** Disables a bot */
        delete: operations["bot-disable-bot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Configure the breakout rooms */
        post: operations["breakout_room-configure-breakout-rooms"];
        /** Remove the breakout rooms */
        delete: operations["breakout_room-remove-breakout-rooms"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Broadcast a chat message to all breakout rooms */
        post: operations["breakout_room-broadcast-chat-message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/attendees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply an attendee map to the breakout rooms */
        post: operations["breakout_room-apply-attendee-map"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/request-assistance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request assistance */
        post: operations["breakout_room-request-assistance"];
        /** Reset the request for assistance */
        delete: operations["breakout_room-reset-request-for-assistance"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start the breakout rooms */
        post: operations["breakout_room-start-breakout-rooms"];
        /** Stop the breakout rooms */
        delete: operations["breakout_room-stop-breakout-rooms"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/switch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Switch to another breakout room */
        post: operations["breakout_room-switch-breakout-room"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/dashboard/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get up to 10 rooms that have events in the next 7 days sorted by their start timestamp ascending
         * @description Required capability: `dashboard-event-rooms`
         */
        get: operations["calendar_integration-get-dashboard-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/mutual-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get up to 3 events in the next 7 days sorted by their start timestamp ascending
         * @description Required capability: `mutual-calendar-events`
         */
        get: operations["calendar_integration-get-mutual-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the peers for a call */
        get: operations["call-get-peers-for-call"];
        /** Update the in-call flags */
        put: operations["call-update-call-flags"];
        /** Join a call */
        post: operations["call-join-call"];
        /** Leave a call */
        delete: operations["call-leave-call"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/notification-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check the expected state of a call notification
         * @description Required capability: `call-notification-state-api`
         */
        get: operations["call_notification-state"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the list of current call participants
         * @description Required capability: `download-call-participants`
         */
        get: operations["call-download-participants-for-call"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/federation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the in-call flags on the host server using the session id of the federated user */
        put: operations["call-update-federated-call-flags"];
        /** Join call on the host server using the session id of the federated user */
        post: operations["call-join-federated-call"];
        /** Leave a call on the host server using the session id of the federated user */
        delete: operations["call-leave-federated-call"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/ring/{attendeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ring an attendee */
        post: operations["call-ring-attendee"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/dialout/{attendeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Call a SIP dial-out attendee */
        post: operations["call-sip-dial-out"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/file/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the token of the room associated to the given file id
         * @description This is the counterpart of self::getRoomByShareToken() for file ids instead of share tokens, although both return the same room token if the given file id and share token refer to the same file.
         *     If there is no room associated to the given file id a new room is created; the new room is a public room associated with a "file" object with the given file id. Unlike normal rooms in which the owner is the user that created the room these are special rooms without owner (although self joined users with direct access to the file become persistent participants automatically when they join until they explicitly leave or no longer have access to the file).
         *     In any case, to create or even get the token of the room, the file must be shared and the user must be the owner of a public share of the file (like a link share, for example) or have direct access to that file; an error is returned otherwise. A user has direct access to a file if they have access to it (or to an ancestor) through a user, group, circle or room share (but not through a link share, for example), or if they are the owner of such a file.
         */
        get: operations["files_integration-get-room-by-file-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/publicshare/{shareToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the token of the room associated to the file of the given share token
         * @description This is the counterpart of self::getRoomByFileId() for share tokens instead of file ids, although both return the same room token if the given file id and share token refer to the same file.
         *     If there is no room associated to the file id of the given share token a new room is created; the new room is a public room associated with a "file" object with the file id of the given share token. Unlike normal rooms in which the owner is the user that created the room these are special rooms without owner (although self joined users with direct access to the file become persistent participants automatically when they join until they explicitly leave or no longer have access to the file).
         *     In any case, to create or even get the token of the room, the file must be publicly shared (like a link share, for example); an error is returned otherwise.
         *     Besides the token of the room this also returns the current user ID and display name, if any; this is needed by the Talk sidebar to know the actual current user, as the public share page uses the incognito mode and thus logged-in users as seen as guests.
         */
        get: operations["files_integration-get-room-by-share-token"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/guest/{token}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the display name as a guest */
        post: operations["guest-set-display-name"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/bridge/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bridge information of one room */
        get: operations["matterbridge-get-bridge-of-room"];
        /** Edit bridge information of one room */
        put: operations["matterbridge-edit-bridge-of-room"];
        post?: never;
        /** Delete bridge of one room */
        delete: operations["matterbridge-delete-bridge-of-room"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/bridge/{token}/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bridge process information */
        get: operations["matterbridge-get-bridge-process-state"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a poll */
        post: operations["poll-create-poll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/draft/{pollId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Modify a draft poll
         * @description Required capability: `edit-draft-poll`
         */
        post: operations["poll-update-draft-poll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/drafts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all drafted polls
         * @description Required capability: `talk-polls-drafts`
         */
        get: operations["poll-get-all-draft-polls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/{pollId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a poll */
        get: operations["poll-show-poll"];
        put?: never;
        /** Vote on a poll */
        post: operations["poll-vote-poll"];
        /** Close a poll */
        delete: operations["poll-close-poll"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/publicshareauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a new room for video verification (requesting the password of a share)
         * @description The new room is a public room associated with a "share:password" object with the ID of the share token. Unlike normal rooms in which the owner is the user that created the room these are special rooms always created by a guest or user on behalf of a registered user, the sharer, who will be the owner of the room.
         *     The share must have "send password by Talk" enabled; an error is returned otherwise.
         */
        post: operations["public_share_auth-create-room"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/reaction/{token}/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of reactions for a message */
        get: operations["reaction-get-reactions"];
        put?: never;
        /** Add a reaction to a message */
        post: operations["reaction-react"];
        /** Delete a reaction from a message */
        delete: operations["reaction-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/recording/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start the recording */
        post: operations["recording-start"];
        /** Stop the recording */
        delete: operations["recording-stop"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/recording/{token}/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Dismiss the store call recording notification */
        delete: operations["recording-notification-dismiss"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/recording/{token}/share-chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Share the recorded file to the chat */
        post: operations["recording-share-to-chat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all currently existent rooms which the user has joined */
        get: operations["room-get-rooms"];
        put?: never;
        /**
         * Create a room with a user, a group or a circle
         * @description With the `conversation-creation-all` capability a lot of new options where introduced. Before that only `$roomType`, `$roomName`, `$objectType` and `$objectId` were supported all the time, and `$password` with the `conversation-creation-password` capability In case the `$roomType` is {@see Room::TYPE_ONE_TO_ONE} only the `$invite` or `$participants` parameter is supported.
         */
        post: operations["room-create-room"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/listed-room": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get listed rooms with optional search term */
        get: operations["room-get-listed-rooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/note-to-self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the "Note to self" conversation for the user
         * @description It will be automatically created when it is currently missing
         */
        get: operations["room-get-note-to-self-conversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a room */
        get: operations["room-get-single-room"];
        /** Rename a room */
        put: operations["room-rename-room"];
        post?: never;
        /** Delete a room */
        delete: operations["room-delete-room"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/breakout-rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get breakout rooms
         * @description All for moderators and in case of "free selection", or the assigned breakout room for other participants
         */
        get: operations["room-get-breakout-rooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/object": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unbind a room from its object to prevent automatic retention
         * @description Required capability: `unbind-conversation`
         */
        delete: operations["room-unbind-room-from-object"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allowed guests to join conversation
         * @description Required capability: `conversation-creation-password` for `string $password` parameter
         */
        post: operations["room-make-public"];
        /** Disallowed guests to join conversation */
        delete: operations["room-make-private"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/description": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the description of a room */
        put: operations["room-set-description"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/read-only": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set read-only state of a room */
        put: operations["room-set-read-only"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/listable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Make a room listable */
        put: operations["room-set-listable"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set a password for a room */
        put: operations["room-set-password"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/permissions/{mode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the permissions of a room */
        put: operations["room-set-permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of participants for a room */
        get: operations["room-get-participants"];
        put?: never;
        /** Add a participant to a room */
        post: operations["room-add-participant-to-room"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/breakout-rooms/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the breakout room participants for a room */
        get: operations["room-get-breakout-room-participants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove the current user from a room */
        delete: operations["room-remove-self-from-room"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove an attendee from a room */
        delete: operations["room-remove-attendee-from-room"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the permissions of an attendee */
        put: operations["room-set-attendee-permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees/permissions/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update the permissions of all attendees
         * @deprecated
         */
        put: operations["room-set-all-attendees-permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join a room */
        post: operations["room-join-room"];
        /** Leave a room */
        delete: operations["room-leave-room"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/resend-invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend invitations */
        post: operations["room-resend-invitations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set active state for a session */
        put: operations["room-set-session-state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/moderators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Promote an attendee to moderator */
        post: operations["room-promote-moderator"];
        /** Demote an attendee from moderator */
        delete: operations["room-demote-moderator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a room to the favorites */
        post: operations["room-add-to-favorites"];
        /** Remove a room from the favorites */
        delete: operations["room-remove-from-favorites"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/important": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark a conversation as important (still sending notifications while on DND)
         * @description Required capability: `important-conversations`
         */
        post: operations["room-mark-conversation-as-important"];
        /**
         * Mark a conversation as unimportant (no longer sending notifications while on DND)
         * @description Required capability: `important-conversations`
         */
        delete: operations["room-mark-conversation-as-unimportant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/sensitive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark a conversation as sensitive (no last message is visible / no push preview is shown)
         * @description Required capability: `sensitive-conversations`
         */
        post: operations["room-mark-conversation-as-sensitive"];
        /**
         * Mark a conversation as insensitive (last message is visible / push preview is shown)
         * @description Required capability: `sensitive-conversations`
         */
        delete: operations["room-mark-conversation-as-insensitive"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/notify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the notification level for a room */
        post: operations["room-set-notification-level"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/notify-calls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update call notifications */
        post: operations["room-set-notification-calls"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/webinar/lobby": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the lobby state for a room */
        put: operations["room-set-lobby"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/webinar/sip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update SIP enabled state */
        put: operations["room-setsip-enabled"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/recording-consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set recording consent requirement for this conversation */
        put: operations["room-set-recording-consent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/message-expiration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update message expiration time */
        post: operations["room-set-message-expiration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get capabilities for a room
         * @description See "Capability handling in federated conversations" in https://github.com/nextcloud/spreed/issues/10680 to learn which capabilities should be considered from the local server or from the remote server.
         */
        get: operations["room-get-capabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/mention-permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the mention permissions for a room */
        put: operations["room-set-mention-permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive a conversation
         * @description Required capability: `archived-conversations-v2`
         */
        post: operations["room-archive-conversation"];
        /**
         * Unarchive a conversation
         * @description Required capability: `archived-conversations-v2`
         */
        delete: operations["room-unarchive-conversation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/import-emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import a list of email attendees
         * @description Content format is comma separated values: - Header line is required and must match `"email","name"` or `"email"` - One entry per line (e.g. `"John Doe","john@example.tld"`)
         *     Required capability: `email-csv-import`
         */
        post: operations["room-import-emails-as-participants"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/meeting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Schedule a meeting for a conversation
         * @description Required capability: `schedule-meeting`
         */
        post: operations["room-schedule-meeting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/settings/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update user setting */
        post: operations["settings-set-user-setting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/signaling/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the signaling settings */
        get: operations["signaling-get-settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/signaling/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get signaling messages */
        get: operations["signaling-pull-messages"];
        put?: never;
        /** Send signaling messages */
        post: operations["signaling-send-messages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/temp-user-avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload your avatar as a user */
        post: operations["temp_avatar-post-avatar"];
        /** Delete your avatar as a user */
        delete: operations["temp_avatar-delete-avatar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Receives chat messages from the given room
         * @description - Receiving the history ($lookIntoFuture=0): The next $limit messages after $lastKnownMessageId will be returned. The new $lastKnownMessageId for the follow up query is available as `X-Chat-Last-Given` header.
         *     - Looking into the future ($lookIntoFuture=1): If there are currently no messages the response will not be sent immediately. Instead, HTTP connection will be kept open waiting for new messages to arrive and, when they do, then the response will be sent. The connection will not be kept open indefinitely, though; the number of seconds to wait for new messages to arrive can be set using the timeout parameter; the default timeout is 30 seconds, maximum timeout is 60 seconds. If the timeout ends a successful but empty response will be sent. If messages have been returned (status=200) the new $lastKnownMessageId for the follow up query is available as `X-Chat-Last-Given` header.
         *     The limit specifies the maximum number of messages that will be returned, although the actual number of returned messages could be lower if some messages are not visible to the participant. Note that if none of the messages are visible to the participant the returned number of messages will be 0, yet the status will still be 200. Also note that `X-Chat-Last-Given` may reference a message not visible and thus not returned, but it should be used nevertheless as the $lastKnownMessageId for the follow-up query.
         */
        get: operations["chat-receive-messages"];
        put?: never;
        /**
         * Sends a new chat message to the given room
         * @description The author and timestamp are automatically set to the current user/guest and time.
         */
        post: operations["chat-send-message"];
        /** Clear the chat history */
        delete: operations["chat-clear-history"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get objects that are shared in the room */
        get: operations["chat-get-objects-shared-in-room"];
        put?: never;
        /**
         * Sends a rich-object to the given room
         * @description The author and timestamp are automatically set to the current user/guest and time.
         */
        post: operations["chat-share-object-to-chat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Summarize the next bunch of chat messages from a given offset
         * @description Required capability: `chat-summary-api`
         */
        post: operations["chat-summarize-chat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/{messageId}/context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the context of a message */
        get: operations["chat-get-message-context"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit a chat message */
        put: operations["chat-edit-message"];
        post?: never;
        /** Delete a chat message */
        delete: operations["chat-delete-message"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/{messageId}/reminder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the reminder for a chat message */
        get: operations["chat-get-reminder"];
        put?: never;
        /** Set a reminder for a chat message */
        post: operations["chat-set-reminder"];
        /** Delete a chat reminder */
        delete: operations["chat-delete-reminder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/upcoming-reminders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all upcoming reminders
         * @description Required capability: `upcoming-reminders`
         */
        get: operations["chat-get-upcoming-reminders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the read marker to a specific message */
        post: operations["chat-set-read-marker"];
        /** Mark a chat as unread */
        delete: operations["chat-mark-unread"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/share/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get objects that are shared in the room overview */
        get: operations["chat-get-objects-shared-in-room-overview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/mentions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for mentions */
        get: operations["chat-mentions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/live-transcription/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable the live transcription */
        post: operations["live_transcription-enable"];
        /** Disable the live transcription */
        delete: operations["live_transcription-disable"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/live-transcription/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available languages for live transcriptions */
        get: operations["live_transcription-get-available-languages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/live-transcription/{token}/language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set language for live transcriptions */
        post: operations["live_transcription-set-language"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/threads/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent active threads in a conversation
         * @description Required capability: `threads`
         */
        get: operations["thread-get-recent-active-threads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/subscribed-threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get subscribed threads for a user
         * @description Required capability: `threads`
         */
        get: operations["thread-get-subscribed-threads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/threads/{threadId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get thread info of a single thread
         * @description Required capability: `threads`
         */
        get: operations["thread-get-thread"];
        /**
         * Rename a thread
         * @description Required capability: `threads`
         */
        put: operations["thread-rename-thread"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/threads/{messageId}/notify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set notification level for a specific thread
         * @description Required capability: `threads`
         */
        post: operations["thread-set-notification-level"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** @enum {string} */
        ActorTypes: "users" | "groups" | "guests" | "emails" | "circles" | "bridged" | "bots" | "federated_users" | "phones";
        Ban: {
            /** Format: int64 */
            id: number;
            moderatorActorType: string;
            moderatorActorId: string;
            moderatorDisplayName: string;
            bannedActorType: string;
            bannedActorId: string;
            bannedDisplayName: string;
            /** Format: int64 */
            bannedTime: number;
            internalNote: string;
        };
        BaseMessage: {
            actorDisplayName: string;
            actorId: string;
            actorType: string;
            /** Format: int64 */
            expirationTimestamp: number;
            message: string;
            messageParameters: {
                [key: string]: components["schemas"]["RichObjectParameter"];
            };
            messageType: string;
            systemMessage: string;
        };
        Bot: {
            description: string | null;
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int64 */
            state: number;
        };
        CallPeer: {
            actorId: string;
            actorType: string;
            displayName: string;
            /** Format: int64 */
            lastPing: number;
            sessionId: string;
            token: string;
        };
        Capabilities: {
            features: string[];
            "features-local": string[];
            config: {
                attachments: {
                    allowed: boolean;
                    folder?: string;
                };
                call: {
                    enabled: boolean;
                    "breakout-rooms": boolean;
                    recording: boolean;
                    /** Format: int64 */
                    "recording-consent": number;
                    "supported-reactions": string[];
                    /** @description List of file names relative to the spreed/img/backgrounds/ web path, e.g. `2_home.jpg` */
                    "predefined-backgrounds": string[];
                    /** @description List of file paths relative to the server web root with leading slash, e.g. `/apps/spreed/img/backgrounds/2_home.jpg` */
                    "predefined-backgrounds-v2": string[];
                    "can-upload-background": boolean;
                    "sip-enabled": boolean;
                    "sip-dialout-enabled": boolean;
                    "can-enable-sip": boolean;
                    "start-without-media": boolean;
                    /** Format: int64 */
                    "max-duration": number;
                    "blur-virtual-background": boolean;
                    "end-to-end-encryption": boolean;
                    "live-transcription": boolean;
                };
                chat: {
                    /** Format: int64 */
                    "max-length": number;
                    /** Format: int64 */
                    "read-privacy": number;
                    "has-translation-providers": boolean;
                    "has-translation-task-providers": boolean;
                    /** Format: int64 */
                    "typing-privacy": number;
                    /** Format: int64 */
                    "summary-threshold": number;
                };
                conversations: {
                    "can-create": boolean;
                    "force-passwords": boolean;
                    /** @enum {string} */
                    "list-style": "two-lines" | "compact";
                    /** Format: int64 */
                    "description-length": number;
                    /** Format: int64 */
                    "retention-event": number;
                    /** Format: int64 */
                    "retention-phone": number;
                    /** Format: int64 */
                    "retention-instant-meetings": number;
                };
                federation: {
                    enabled: boolean;
                    "incoming-enabled": boolean;
                    "outgoing-enabled": boolean;
                    "only-trusted-servers": boolean;
                };
                previews: {
                    /** Format: int64 */
                    "max-gif-size": number;
                };
                signaling: {
                    /** Format: int64 */
                    "session-ping-limit": number;
                    "hello-v2-token-key"?: string;
                };
                experiments: {
                    /** Format: int64 */
                    enabled: number;
                };
            };
            "config-local": {
                [key: string]: string[];
            };
            version: string;
        };
        ChatMentionSuggestion: {
            id: string;
            label: string;
            source: string;
            mentionId: string;
            details?: string;
            status?: string;
            /** Format: int64 */
            statusClearAt?: number | null;
            statusIcon?: string | null;
            statusMessage?: string | null;
        };
        ChatMessage: components["schemas"]["BaseMessage"] & {
            /** @enum {boolean} */
            deleted?: true;
            /** Format: int64 */
            id: number;
            isReplyable: boolean;
            markdown: boolean;
            reactions: {
                [key: string]: number;
            };
            reactionsSelf?: string[];
            referenceId: string;
            /** Format: int64 */
            timestamp: number;
            token: string;
            lastEditActorDisplayName?: string;
            lastEditActorId?: string;
            lastEditActorType?: string;
            /** Format: int64 */
            lastEditTimestamp?: number;
            silent?: boolean;
            /** Format: int64 */
            threadId?: number;
            isThread?: boolean;
            threadTitle?: string;
            /** Format: int64 */
            threadReplies?: number;
        };
        ChatMessageWithParent: components["schemas"]["ChatMessage"] & {
            parent?: components["schemas"]["ChatMessage"] | components["schemas"]["DeletedChatMessage"];
        };
        ChatProxyMessage: components["schemas"]["BaseMessage"];
        ChatReminder: {
            /** Format: int64 */
            messageId: number;
            /** Format: int64 */
            timestamp: number;
            token: string;
            userId: string;
        };
        ChatReminderUpcoming: {
            actorDisplayName: string;
            actorId: string;
            actorType: string;
            message: string;
            /** Format: int64 */
            messageId: number;
            messageParameters: {
                [key: string]: components["schemas"]["RichObjectParameter"];
            };
            /** Format: int64 */
            reminderTimestamp: number;
            roomToken: string;
        };
        DashboardEvent: {
            calendars: components["schemas"]["DashboardEventCalendar"][];
            eventName: string;
            eventDescription: string | null;
            eventAttachments: {
                [key: string]: components["schemas"]["DashboardEventAttachment"];
            };
            eventLink: string;
            /** Format: int64 */
            start: number;
            /** Format: int64 */
            end: number;
            roomToken: string;
            roomAvatarVersion: string;
            roomName: string;
            roomDisplayName: string;
            /** Format: int64 */
            roomType: number;
            /** Format: int64 */
            roomActiveSince: number | null;
            /** Format: int64 */
            invited: number | null;
            /** Format: int64 */
            accepted: number | null;
            /** Format: int64 */
            tentative: number | null;
            /** Format: int64 */
            declined: number | null;
        };
        DashboardEventAttachment: {
            calendars: string[];
            fmttype: string;
            filename: string;
            /** Format: int64 */
            fileid: number;
            preview: boolean;
            previewLink: string | null;
        };
        DashboardEventCalendar: {
            principalUri: string;
            calendarName: string;
            calendarColor: string | null;
        };
        DeletedChatMessage: {
            /** Format: int64 */
            id: number;
            /** @enum {boolean} */
            deleted: true;
        };
        InvitationList: {
            users?: string[];
            federated_users?: string[];
            groups?: string[];
            emails?: string[];
            phones?: string[];
            teams?: string[];
        };
        LiveTranscriptionLanguage: {
            name: string;
            metadata: {
                separator: string;
                rtl: boolean;
            };
        };
        Matterbridge: {
            enabled: boolean;
            parts: components["schemas"]["MatterbridgeConfigFields"];
            /** Format: int64 */
            pid: number;
        };
        MatterbridgeConfigFields: {
            [key: string]: Record<string, never>;
        }[];
        MatterbridgeProcessState: {
            log: string;
            running: boolean;
        };
        MatterbridgeWithProcessState: components["schemas"]["Matterbridge"] & components["schemas"]["MatterbridgeProcessState"];
        OCSMeta: {
            status: string;
            statuscode: number;
            message?: string;
            totalitems?: string;
            itemsperpage?: string;
        };
        Participant: {
            actorId: string;
            invitedActorId?: string;
            actorType: string;
            /** Format: int64 */
            attendeeId: number;
            /** Format: int64 */
            attendeePermissions: number;
            attendeePin: string;
            displayName: string;
            /** Format: int64 */
            inCall: number;
            /** Format: int64 */
            lastPing: number;
            /** Format: int64 */
            participantType: number;
            /** Format: int64 */
            permissions: number;
            roomToken: string;
            sessionIds: string[];
            status?: string;
            /** Format: int64 */
            statusClearAt?: number | null;
            statusIcon?: string | null;
            statusMessage?: string | null;
            phoneNumber?: string | null;
            callId?: string | null;
        };
        Poll: components["schemas"]["PollDraft"] & {
            details?: components["schemas"]["PollVote"][];
            /** Format: int64 */
            numVoters?: number;
            votedSelf?: number[];
            votes?: {
                [key: string]: number;
            };
        };
        PollDraft: {
            actorDisplayName: string;
            actorId: string;
            actorType: components["schemas"]["ActorTypes"];
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            maxVotes: number;
            options: string[];
            question: string;
            /**
             * Format: int64
             * @enum {integer}
             */
            resultMode: 0 | 1;
            /**
             * Format: int64
             * @enum {integer}
             */
            status: 0 | 1 | 2;
        };
        PollVote: {
            actorDisplayName: string;
            actorId: string;
            actorType: string;
            /** Format: int64 */
            optionId: number;
        };
        PublicCapabilities: {
            spreed?: components["schemas"]["Capabilities"];
        };
        Reaction: {
            actorDisplayName: string;
            actorId: string;
            actorType: string;
            /** Format: int64 */
            timestamp: number;
        };
        RichObjectParameter: {
            type: string;
            id: string;
            name: string;
            server?: string;
            link?: string;
            /** @enum {string} */
            "call-type"?: "one2one" | "group" | "public";
            "icon-url"?: string;
            "message-id"?: string;
            boardname?: string;
            stackname?: string;
            size?: string;
            path?: string;
            mimetype?: string;
            /** @enum {string} */
            "preview-available"?: "yes" | "no";
            /** @enum {string} */
            "hide-download"?: "yes" | "no";
            mtime?: string;
            latitude?: string;
            longitude?: string;
            description?: string;
            thumb?: string;
            website?: string;
            /** @enum {string} */
            visibility?: "0" | "1";
            /** @enum {string} */
            assignable?: "0" | "1";
            conversation?: string;
            etag?: string;
            permissions?: string;
            width?: string;
            height?: string;
            blurhash?: string;
        };
        Room: {
            /** @description The unique identifier for the given actor type */
            actorId: string;
            /** @description The cloud id of the invited user */
            invitedActorId?: string;
            /** @description Actor type of the current user (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#attendee-types)) */
            actorType: string;
            /**
             * Format: int64
             * @description Unique attendee id
             */
            attendeeId: number;
            /**
             * Format: int64
             * @description Dedicated permissions for the current participant, if not `Custom` this are not the resulting permissions (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#attendee-permissions))
             */
            attendeePermissions: number;
            /** @description Unique dial-in authentication code for this user, when the conversation has SIP enabled (see `sipEnabled` attribute) */
            attendeePin: string | null;
            /** @description Version of conversation avatar used to easier expiration of the avatar in case a moderator updates it, since the avatar endpoint should be cached for 24 hours. (only available with `avatar` capability) */
            avatarVersion: string;
            /**
             * Format: int64
             * @description Breakout room configuration mode (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#breakout-room-modes)) (only available with `breakout-rooms-v1` capability)
             */
            breakoutRoomMode: number;
            /**
             * Format: int64
             * @description Breakout room status (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#breakout-room-status)) (only available with `breakout-rooms-v1` capability)
             */
            breakoutRoomStatus: number;
            /**
             * Format: int64
             * @description Combined flag of all participants in the current call (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#participant-in-call-flag), only available with `conversation-call-flags` capability)
             */
            callFlag: number;
            /**
             * Format: int64
             * @description Call permissions, if not `Custom` this are not the resulting permissions, if set they will reset after the end of the call (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#attendee-permissions))
             */
            callPermissions: number;
            /**
             * Format: int64
             * @description Type of call recording (see [Constants - Call recording status](https://nextcloud-talk.readthedocs.io/en/latest/constants#call-recording-status)) (only available with `recording-v1` capability)
             * @enum {integer}
             */
            callRecording: 0 | 1 | 2 | 3 | 4 | 5;
            /**
             * Format: int64
             * @description Timestamp when the call was started (only available with `recording-v1` capability)
             */
            callStartTime: number;
            /** @description Flag if the user can delete the conversation for everyone (not possible without moderator permissions or in one-to-one conversations) */
            canDeleteConversation: boolean;
            /** @description Whether the given user can enable SIP for this conversation. Note that when the token is not-numeric only, SIP can not be enabled even if the user is permitted and a moderator of the conversation */
            canEnableSIP: boolean;
            /** @description Flag if the user can leave the conversation (not possible for the last user with moderator permissions) */
            canLeaveConversation: boolean;
            /** @description Flag if the user can start a new call in this conversation (joining is always possible) (only available with `start-call-flag` capability) */
            canStartCall: boolean;
            /**
             * Format: int64
             * @description Default permissions for new participants (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#attendee-permissions))
             */
            defaultPermissions: number;
            /** @description Description of the conversation (can also be empty) (only available with `room-description` capability) */
            description: string;
            /** @description `name` if non-empty, otherwise it falls back to a list of participants */
            displayName: string;
            /** @description Flag if the conversation has an active call */
            hasCall: boolean;
            /** @description Flag if the conversation has a password */
            hasPassword: boolean;
            /**
             * Format: int64
             * @description Numeric identifier of the conversation
             */
            id: number;
            /** @description Flag if the conversation has a custom avatar (only available with `avatar` capability) */
            isCustomAvatar: boolean;
            /** @description Flag if the conversation is favorited by the user */
            isFavorite: boolean;
            /**
             * Format: int64
             * @description Timestamp of the last activity in the conversation, in seconds and UTC time zone
             */
            lastActivity: number;
            /**
             * Format: int64
             * @description ID of the last message read by every user that has read privacy set to public in a room. When the user themself has it set to private the value is `0` (only available with `chat-read-status` capability)
             */
            lastCommonReadMessage: number;
            /** @description Last message in a conversation if available, otherwise empty. **Note:** Even when given the message will not contain the `parent` or `reactionsSelf` attribute due to performance reasons */
            lastMessage?: components["schemas"]["RoomLastMessage"];
            /**
             * Format: int64
             * @description Timestamp of the user's session making the request
             */
            lastPing: number;
            /**
             * Format: int64
             * @description ID of the last read message in a room (only available with `chat-read-marker` capability)
             */
            lastReadMessage: number;
            /**
             * Format: int64
             * @description Listable scope for the room (only available with `listable-rooms` capability)
             */
            listable: number;
            /** @description ID of the language to use for live transcriptions in the room, */
            liveTranscriptionLanguageId: string;
            /**
             * Format: int64
             * @description Webinar lobby restriction (0-1), if the participant is a moderator they can always join the conversation (only available with `webinary-lobby` capability) (See [Webinar lobby states](https://nextcloud-talk.readthedocs.io/en/latest/constants#webinar-lobby-states))
             */
            lobbyState: number;
            /**
             * Format: int64
             * @description Timestamp when the lobby will be automatically disabled (only available with `webinary-lobby` capability)
             */
            lobbyTimer: number;
            /**
             * Format: int64
             * @description Whether all participants can mention using `@all` or only moderators (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#mention-permissions)) (only available with `mention-permissions` capability)
             * @enum {integer}
             */
            mentionPermissions: 0 | 1;
            /**
             * Format: int64
             * @description The message expiration time in seconds in this chat. Zero if disabled. (only available with `message-expiration` capability)
             */
            messageExpiration: number;
            /** @description Name of the conversation (can also be empty) */
            name: string;
            /** Format: int64 */
            notificationCalls: number;
            /**
             * Format: int64
             * @description The notification level for the user (See [Participant notification levels](https://nextcloud-talk.readthedocs.io/en/latest/constants#participant-notification-levels))
             */
            notificationLevel: number;
            /** @description See [Object types](https://nextcloud-talk.readthedocs.io/en/latest/constants#object-types) documentation for explanation */
            objectId: string;
            /** @description The type of object that the conversation is associated with (See [Object types](https://nextcloud-talk.readthedocs.io/en/latest/constants#object-types)) */
            objectType: string;
            /**
             * Format: int64
             * @description "In call" flags of the user's session making the request (only available with `in-call-flags` capability)
             */
            participantFlags: number;
            /**
             * Format: int64
             * @description Permissions level of the current user
             */
            participantType: number;
            /**
             * Format: int64
             * @description Combined final permissions for the current participant, permissions are picked in order of attendee then call then default and the first which is `Custom` will apply (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#attendee-permissions))
             */
            permissions: number;
            /**
             * Format: int64
             * @description Read-only state for the current user (only available with `read-only-rooms` capability)
             */
            readOnly: number;
            /**
             * Format: int64
             * @description Whether recording consent is required before joining a call (Only 0 and 1 will be returned, see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#recording-consent-required)) (only available with `recording-consent` capability)
             */
            recordingConsent: number;
            remoteServer?: string;
            remoteToken?: string;
            /** @description `'0'` if not connected, otherwise an up to 512 character long string that is the identifier of the user's session making the request. Should only be used to pre-check if the user joined already with this session, but this might be outdated by the time of usage, so better check via [Get list of participants in a conversation](https://nextcloud-talk.readthedocs.io/en/latest/participant/#get-list-of-participants-in-a-conversation) */
            sessionId: string;
            /**
             * Format: int64
             * @description SIP enable status (see [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants#sip-states))
             */
            sipEnabled: number;
            /** @description Optional: Only available for one-to-one conversations, when `includeStatus=true` is set and the user has a status */
            status?: string;
            /**
             * Format: int64
             * @description Optional: Only available for one-to-one conversations, when `includeStatus=true` is set and the user has a status, can still be null even with a status
             */
            statusClearAt?: number | null;
            /** @description Optional: Only available for one-to-one conversations, when `includeStatus=true` is set and the user has a status, can still be null even with a status */
            statusIcon?: string | null;
            /** @description Optional: Only available for one-to-one conversations, when `includeStatus=true` is set and the user has a status, can still be null even with a status */
            statusMessage?: string | null;
            /** @description Token identifier of the conversation which is used for further interaction */
            token: string;
            /**
             * Format: int64
             * @description See list of conversation types in the [constants list](https://nextcloud-talk.readthedocs.io/en/latest/constants/#conversation-types)
             */
            type: number;
            /** @description Flag if the user was mentioned since their last visit */
            unreadMention: boolean;
            /** @description Flag if the user was mentioned directly (ignoring `@all` mentions) since their last visit (only available with `direct-mention-flag` capability) */
            unreadMentionDirect: boolean;
            /**
             * Format: int64
             * @description Number of unread chat messages in the conversation (only available with `chat-v2` capability)
             */
            unreadMessages: number;
            /** @description Flag if the conversation is archived by the user (only available with `archived-conversations-v2` capability) */
            isArchived: boolean;
            /** @description Required capability: `important-conversations` */
            isImportant: boolean;
            /** @description Required capability: `sensitive-conversations` */
            isSensitive: boolean;
        };
        RoomLastMessage: components["schemas"]["ChatMessage"] | components["schemas"]["ChatProxyMessage"];
        RoomWithInvalidInvitations: components["schemas"]["Room"] & {
            invalidParticipants: components["schemas"]["InvitationList"];
        };
        SignalingFederationSettings: {
            server: string;
            nextcloudServer: string;
            helloAuthParams: {
                token: string;
            };
            roomId: string;
        };
        SignalingSession: {
            actorId: string;
            actorType: string;
            /** Format: int64 */
            inCall: number;
            /** Format: int64 */
            lastPing: number;
            /** Format: int64 */
            participantPermissions: number;
            /** Format: int64 */
            roomId: number;
            sessionId: string;
            userId: string;
        };
        SignalingSettings: {
            federation: components["schemas"]["SignalingFederationSettings"] | null;
            helloAuthParams: {
                "1.0": {
                    userid: string | null;
                    ticket: string;
                };
                "2.0": {
                    token: string;
                };
            };
            hideWarning: boolean;
            server: string;
            signalingMode: string;
            sipDialinInfo: string;
            stunservers: {
                urls: string[];
            }[];
            ticket: string;
            turnservers: {
                urls: string[];
                username: string;
                credential: Record<string, never>;
            }[];
            userId: string | null;
        };
        Thread: {
            /** Format: int64 */
            id: number;
            roomToken: string;
            title: string;
            /** Format: int64 */
            lastMessageId: number;
            /** Format: int64 */
            lastActivity: number;
            /** Format: int64 */
            numReplies: number;
        };
        ThreadAttendee: {
            /**
             * Format: int64
             * @enum {integer}
             */
            notificationLevel: 0 | 1 | 2 | 3;
        };
        ThreadInfo: {
            thread: components["schemas"]["Thread"];
            attendee: components["schemas"]["ThreadAttendee"];
            first: components["schemas"]["ChatMessage"] | null;
            last: components["schemas"]["ChatMessage"] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    "avatar-get-avatar": {
        parameters: {
            query?: {
                /** @description Theme used for background */
                darkTheme?: boolean;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room avatar returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    "avatar-upload-avatar": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Avatar uploaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Avatar invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "avatar-delete-avatar": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Avatar removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
        };
    };
    "avatar-emoji-avatar": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Emoji */
                    emoji: string;
                    /** @description Color of the emoji */
                    color?: string | null;
                };
            };
        };
        responses: {
            /** @description Avatar set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Setting emoji avatar is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "avatar-get-avatar-dark": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room avatar returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    "ban-list-bans": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all bans */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Ban"][];
                        };
                    };
                };
            };
        };
    };
    "ban-ban-actor": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Type of actor to ban, or `ip` when banning a clients remote address
                     * @enum {string}
                     */
                    actorType: "users" | "guests" | "emails" | "ip";
                    /** @description Actor ID or the IP address or range in case of type `ip` */
                    actorId: string;
                    /**
                     * @description Optional internal note (max. 4000 characters)
                     * @default
                     */
                    internalNote?: string;
                };
            };
        };
        responses: {
            /** @description Ban successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Ban"];
                        };
                    };
                };
            };
            /** @description Actor information is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "bannedActor" | "internalNote" | "moderator" | "self" | "room";
                            };
                        };
                    };
                };
            };
        };
    };
    "ban-unban-actor": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the ban to be removed */
                banId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unban successfully or not found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "bot-list-bots": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bot list returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Bot"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "bot-enable-bot": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the bot */
                botId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bot already enabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Bot"] | null;
                        };
                    };
                };
            };
            /** @description Bot enabled successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Bot"] | null;
                        };
                    };
                };
            };
            /** @description Enabling bot errored */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "bot-disable-bot": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the bot */
                botId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bot disabled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Bot"] | null;
                        };
                    };
                };
            };
            /** @description Disabling bot errored */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-configure-breakout-rooms": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Mode of the breakout rooms
                     * @enum {integer}
                     */
                    mode: 0 | 1 | 2 | 3;
                    /**
                     * Format: int64
                     * @description Number of breakout rooms - Constants {@see BreakoutRoom::MINIMUM_ROOM_AMOUNT} and {@see BreakoutRoom::MAXIMUM_ROOM_AMOUNT}
                     */
                    amount: number;
                    /**
                     * @description Mapping of the attendees to breakout rooms
                     * @default []
                     */
                    attendeeMap?: string;
                };
            };
        };
        responses: {
            /** @description Breakout rooms configured successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Configuring breakout rooms errored */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-remove-breakout-rooms": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Breakout rooms removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-broadcast-chat-message": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Message to broadcast */
                    message: string;
                };
            };
        };
        responses: {
            /** @description Chat message broadcasted successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Broadcasting chat message is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Chat message too long */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "breakout_room-apply-attendee-map": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description JSON encoded mapping of the attendees to breakout rooms `array<int, int>` */
                    attendeeMap: string;
                };
            };
        };
        responses: {
            /** @description Attendee map applied successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Applying attendee map is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-request-assistance": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Assistance requested successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Requesting assistance is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-reset-request-for-assistance": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request for assistance reset successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Resetting the request for assistance is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-start-breakout-rooms": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Breakout rooms started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Starting breakout rooms is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-stop-breakout-rooms": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Breakout rooms stopped successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Stopping breakout rooms is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "breakout_room-switch-breakout-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Target breakout room */
                    target: string;
                };
            };
        };
        responses: {
            /** @description Switched to breakout room successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Switching to breakout room is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "calendar_integration-get-dashboard-events": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of dashboard entries or an empty array */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["DashboardEvent"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "calendar_integration-get-mutual-events": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of dashboard entries or an empty array */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["DashboardEvent"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Room is not a 1 to 1 room, room is invalid, or user is not participant */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-get-peers-for-call": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of peers in the call returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["CallPeer"][];
                        };
                    };
                };
            };
        };
    };
    "call-update-call-flags": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New flags
                     */
                    flags: number;
                };
            };
        };
        responses: {
            /** @description In-call flags updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Updating in-call flags is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Call session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-join-call": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description In-Call flags
                     * @default null
                     */
                    flags?: number | null;
                    /**
                     * @description Join the call silently
                     * @default false
                     */
                    silent?: boolean;
                    /**
                     * @description When the user ticked a checkbox and agreed with being recorded (Only needed when the `config => call => recording-consent` capability is set to {@see RecordingService::CONSENT_REQUIRED_YES} or the capability is {@see RecordingService::CONSENT_REQUIRED_OPTIONAL} and the conversation `recordingConsent` value is {@see RecordingService::CONSENT_REQUIRED_YES} )
                     * @default false
                     */
                    recordingConsent?: boolean;
                    /**
                     * @description Send no call notification for previous participants
                     * @default []
                     */
                    silentFor?: string[];
                };
            };
        };
        responses: {
            /** @description Call joined successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description No recording consent was given */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Call not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-leave-call": {
        parameters: {
            query?: {
                /** @description whether to also terminate the call for all participants */
                all?: boolean;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Call left successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Call session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call_notification-state": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                /** @description Conversation token to check */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notification should be kept alive */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Dismiss call notification and show "Missed call"-notification instead */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Not logged in, try again with auth data sent */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Dismiss call notification */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-download-participants-for-call": {
        parameters: {
            query?: {
                /** @description Download format */
                format?: "csv";
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of participants in the call downloaded in the requested format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/csv": string;
                };
            };
            /** @description No call in progress */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "call-update-federated-call-flags": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Federated session id to update the flags with */
                    sessionId: string;
                    /**
                     * Format: int64
                     * @description New flags
                     */
                    flags: number;
                };
            };
        };
        responses: {
            /** @description In-call flags updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Updating in-call flags is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Call session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-join-federated-call": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Federated session id to join with */
                    sessionId: string;
                    /**
                     * Format: int64
                     * @description In-Call flags
                     * @default null
                     */
                    flags?: number | null;
                    /**
                     * @description Join the call silently
                     * @default false
                     */
                    silent?: boolean;
                    /**
                     * @description Agreement to be recorded
                     * @default false
                     */
                    recordingConsent?: boolean;
                };
            };
        };
        responses: {
            /** @description Call joined successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Conditions to join not met */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Call not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-leave-federated-call": {
        parameters: {
            query: {
                /** @description Federated session id to leave with */
                sessionId: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Call left successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Call session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-ring-attendee": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
                /** @description ID of the attendee to ring */
                attendeeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attendee rang successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Ringing attendee is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Attendee could not be found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "call-sip-dial-out": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
                /** @description ID of the attendee to call */
                attendeeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dial-out initiated successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description SIP dial-out not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Participant could not be found or is a wrong type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description SIP dial-out is not configured on the server */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                                message?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "files_integration-get-room-by-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description ID of the file */
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room token returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                token: string;
                            };
                        };
                    };
                };
            };
            /** @description Rooms not allowed for shares */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Share not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "files_integration-get-room-by-share-token": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Token of the file share */
                shareToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room token and user info returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                token: string;
                                userId: string;
                                userDisplayName: string;
                            };
                        };
                    };
                };
            };
            /** @description Rooms not allowed for shares */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Share not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "guest-set-display-name": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New display name */
                    displayName: string;
                };
            };
        };
        responses: {
            /** @description Display name updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Not a guest */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Not a participant */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "matterbridge-get-bridge-of-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return list of configured bridges */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["MatterbridgeWithProcessState"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "matterbridge-edit-bridge-of-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description If the bridge should be enabled */
                    enabled: boolean;
                    /**
                     * @description New parts
                     * @default []
                     */
                    parts?: components["schemas"]["MatterbridgeConfigFields"];
                };
            };
        };
        responses: {
            /** @description Bridge edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["MatterbridgeProcessState"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Editing bridge is not possible */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "matterbridge-delete-bridge-of-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bridge deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: boolean;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Deleting bridge is not possible */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "matterbridge-get-bridge-process-state": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return list of running processes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["MatterbridgeProcessState"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "poll-create-poll": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Question of the poll */
                    question: string;
                    /** @description Options of the poll */
                    options: string[];
                    /**
                     * Format: int64
                     * @description Mode how the results will be shown
                     * @enum {integer}
                     */
                    resultMode: 0 | 1;
                    /**
                     * Format: int64
                     * @description Number of maximum votes per voter
                     */
                    maxVotes: number;
                    /**
                     * @description Whether the poll should be saved as a draft (only allowed for moderators and with `talk-polls-drafts` capability)
                     * @default false
                     */
                    draft?: boolean;
                    /**
                     * Format: int64
                     * @description Thread id which this poll should be posted into (also requires `threads` capability)
                     * @default 0
                     */
                    threadId?: number;
                };
            };
        };
        responses: {
            /** @description Draft created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["PollDraft"];
                        };
                    };
                };
            };
            /** @description Poll created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Poll"];
                        };
                    };
                };
            };
            /** @description Creating poll is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
        };
    };
    "poll-update-draft-poll": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description The poll id */
                pollId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Question of the poll */
                    question: string;
                    /** @description Options of the poll */
                    options: string[];
                    /**
                     * Format: int64
                     * @description Mode how the results will be shown
                     * @enum {integer}
                     */
                    resultMode: 0 | 1;
                    /**
                     * Format: int64
                     * @description Number of maximum votes per voter
                     */
                    maxVotes: number;
                };
            };
        };
        responses: {
            /** @description Draft modified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["PollDraft"];
                        };
                    };
                };
            };
            /** @description Modifying poll is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
            /** @description No permission to modify this poll */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
            /** @description No draft poll exists */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
        };
    };
    "poll-get-all-draft-polls": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Poll returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["PollDraft"][];
                        };
                    };
                };
            };
            /** @description User is not a moderator */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Poll not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "poll-show-poll": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the poll */
                pollId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Poll returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Poll"];
                        };
                    };
                };
            };
            /** @description Poll not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "poll-vote-poll": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the poll */
                pollId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description IDs of the selected options
                     * @default []
                     */
                    optionIds?: number[];
                };
            };
        };
        responses: {
            /** @description Voted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Poll"];
                        };
                    };
                };
            };
            /** @description Voting is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Poll not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "poll-close-poll": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the poll */
                pollId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Poll closed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Poll"];
                        };
                    };
                };
            };
            /** @description Poll draft was deleted successfully */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Poll already closed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to close poll */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
            /** @description Poll not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "draft" | "options" | "poll" | "question" | "room";
                            };
                        };
                    };
                };
            };
        };
    };
    "public_share_auth-create-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Token of the file share */
                    shareToken: string;
                };
            };
        };
        responses: {
            /** @description Room created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                token: string;
                                name: string;
                                displayName: string;
                            };
                        };
                    };
                };
            };
            /** @description Share not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reaction-get-reactions": {
        parameters: {
            query?: {
                /** @description Emoji to filter */
                reaction?: string | null;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reactions returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["Reaction"][];
                            };
                        };
                    };
                };
            };
            /** @description Message or reaction not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reaction-react": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Emoji to add */
                    reaction: string;
                };
            };
        };
        responses: {
            /** @description Reaction already existed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["Reaction"][];
                            };
                        };
                    };
                };
            };
            /** @description Reaction added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["Reaction"][];
                            };
                        };
                    };
                };
            };
            /** @description Adding reaction is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reaction-delete": {
        parameters: {
            query: {
                /** @description Emoji to remove */
                reaction: string;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reaction deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["Reaction"][];
                            };
                        };
                    };
                };
            };
            /** @description Deleting reaction is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "recording-start": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Type of the recording
                     */
                    status: number;
                };
            };
        };
        responses: {
            /** @description Recording started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Starting recording is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "recording-stop": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recording stopped successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Stopping recording is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "recording-notification-dismiss": {
        parameters: {
            query: {
                /** @description Timestamp of the notification to be dismissed */
                timestamp: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notification dismissed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Dismissing notification is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "recording-share-to-chat": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of the file
                     */
                    fileId: number;
                    /**
                     * Format: int64
                     * @description Timestamp of the notification to be dismissed
                     */
                    timestamp: number;
                };
            };
        };
        responses: {
            /** @description Recording shared to chat successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Sharing recording to chat is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-get-rooms": {
        parameters: {
            query?: {
                /** @description When the user status should not be automatically set to online set to 1 (default 0) */
                noStatusUpdate?: 0 | 1;
                /** @description Include the user status */
                includeStatus?: boolean;
                /** @description Filter rooms modified after a timestamp */
                modifiedSince?: number;
                /** @description Include the last message, clients should opt-out when only rendering a compact list */
                includeLastMessage?: boolean;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return list of rooms */
            200: {
                headers: {
                    "X-Nextcloud-Talk-Hash"?: string;
                    "X-Nextcloud-Talk-Modified-Before"?: string;
                    "X-Nextcloud-Talk-Federation-Invites"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-create-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Type of the room
                     */
                    roomType: number;
                    /**
                     * @deprecated
                     * @description User, group, … ID to invite Deprecated: Use the `$participants` array instead
                     * @default
                     */
                    invite?: string;
                    /**
                     * @description Name of the room, unless the legacy mode providing `$invite` and `$source` is used, the name must no longer be empty with the `conversation-creation-all` capability (Ignored if `$roomType` is {@see Room::TYPE_ONE_TO_ONE})
                     * @default
                     */
                    roomName?: string;
                    /**
                     * @deprecated
                     * @description Source of the invite ID ('circles' to create a room with a circle, etc.) Deprecated: Use the `$participants` array instead
                     * @default
                     */
                    source?: string;
                    /**
                     * @description Type of the object (Ignored if `$roomType` is {@see Room::TYPE_ONE_TO_ONE})
                     * @default
                     */
                    objectType?: string;
                    /**
                     * @description ID of the object (Ignored if `$roomType` is {@see Room::TYPE_ONE_TO_ONE})
                     * @default
                     */
                    objectId?: string;
                    /**
                     * @description The room password (only available with `conversation-creation-password` capability) (Ignored if `$roomType` is not {@see Room::TYPE_PUBLIC})
                     * @default
                     */
                    password?: string;
                    /**
                     * Format: int64
                     * @description Read only state of the conversation (Default writable) (only available with `conversation-creation-all` capability)
                     * @enum {integer}
                     */
                    readOnly: 0 | 1;
                    /**
                     * Format: int64
                     * @description Scope where the conversation is listable (Default not listable for anyone) (only available with `conversation-creation-all` capability)
                     * @enum {integer}
                     */
                    listable: 0 | 1 | 2;
                    /**
                     * Format: int64
                     * @description Seconds after which messages will disappear, 0 disables expiration (Default 0) (only available with `conversation-creation-all` capability)
                     * @default 0
                     */
                    messageExpiration?: number;
                    /**
                     * Format: int64
                     * @description Lobby state of the conversation (Default lobby is disabled) (only available with `conversation-creation-all` capability)
                     * @enum {integer}
                     */
                    lobbyState: 0 | 1;
                    /**
                     * Format: int64
                     * @description Timer when the lobby will be removed (Default null, will not be disabled automatically) (only available with `conversation-creation-all` capability)
                     * @default null
                     */
                    lobbyTimer?: number | null;
                    /**
                     * Format: int64
                     * @description Whether SIP dial-in shall be enabled (only available with `conversation-creation-all` capability)
                     * @enum {integer}
                     */
                    sipEnabled: 0 | 1 | 2;
                    /**
                     * Format: int64
                     * @description Default permissions for participants (only available with `conversation-creation-all` capability)
                     */
                    permissions: number;
                    /**
                     * Format: int64
                     * @description Whether participants need to agree to a recording before joining a call (only available with `conversation-creation-all` capability)
                     * @enum {integer}
                     */
                    recordingConsent: 0 | 1;
                    /**
                     * Format: int64
                     * @description Who can mention at-all in the chat (only available with `conversation-creation-all` capability)
                     * @enum {integer}
                     */
                    mentionPermissions: 0 | 1;
                    /**
                     * @description Description for the conversation (limited to 2.000 characters) (only available with `conversation-creation-all` capability)
                     * @default
                     */
                    description?: string;
                    /**
                     * @description Emoji for the avatar of the conversation (only available with `conversation-creation-all` capability)
                     * @default null
                     */
                    emoji?: string | null;
                    /**
                     * @description Background color of the avatar (Only considered when an emoji was provided) (only available with `conversation-creation-all` capability)
                     * @default null
                     */
                    avatarColor?: string | null;
                    /**
                     * @description List of participants to add grouped by type (only available with `conversation-creation-all` capability)
                     * @default []
                     */
                    participants?: components["schemas"]["InvitationList"];
                };
            };
        };
        responses: {
            /** @description Room already existed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Room created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Room created successfully but not all participants could be added */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["RoomWithInvalidInvitations"];
                        };
                    };
                };
            };
            /** @description Room type invalid or missing or invalid password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "avatar" | "description" | "invite" | "listable" | "lobby" | "lobby-timer" | "mention-permissions" | "message-expiration" | "name" | "object" | "object-id" | "object-type" | "password" | "permissions" | "read-only" | "recording-consent" | "sip-enabled" | "type";
                                message?: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Missing permissions to create room */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "avatar" | "description" | "invite" | "listable" | "lobby" | "lobby-timer" | "mention-permissions" | "message-expiration" | "name" | "object" | "object-id" | "object-type" | "password" | "permissions" | "read-only" | "recording-consent" | "sip-enabled" | "type";
                                message?: string;
                            };
                        };
                    };
                };
            };
            /** @description User, group or other target to invite was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "avatar" | "description" | "invite" | "listable" | "lobby" | "lobby-timer" | "mention-permissions" | "message-expiration" | "name" | "object" | "object-id" | "object-type" | "password" | "permissions" | "read-only" | "recording-consent" | "sip-enabled" | "type";
                                message?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "room-get-listed-rooms": {
        parameters: {
            query?: {
                /** @description search term */
                searchTerm?: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return list of matching rooms */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-get-note-to-self-conversation": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room returned successfully */
            200: {
                headers: {
                    "X-Nextcloud-Talk-Hash"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-get-single-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Random seed used to generate the request checksum */
                "talk-sipbridge-random"?: string;
                /** @description Checksum over the request body to verify authenticity from the Sipbridge */
                "talk-sipbridge-checksum"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                /** @description Token of the room */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room returned */
            200: {
                headers: {
                    "X-Nextcloud-Talk-Hash"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description SIP request invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-rename-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New name */
                    roomName: string;
                };
            };
        };
        responses: {
            /** @description Room renamed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Renaming room is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "event" | "type" | "value";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-delete-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Deleting room is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-get-breakout-rooms": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Breakout rooms returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"][];
                        };
                    };
                };
            };
            /** @description Getting breakout rooms is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-unbind-room-from-object": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room successfully unbound */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Unbinding room is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "object-type";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-make-public": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New password (only available with `conversation-creation-password` capability)
                     * @default
                     */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Allowed guests successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Allowing guests is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "type" | "value" | "password";
                                message?: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-make-private": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room unpublished Disallowing guests successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Disallowing guests is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-description": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New description for the conversation (limited to 2.000 characters, was 500 before Talk 21) */
                    description: string;
                };
            };
        };
        responses: {
            /** @description Description updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating description is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "event" | "type" | "value";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-read-only": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New read-only state
                     * @enum {integer}
                     */
                    state: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Read-only state updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating read-only state is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-listable": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Scope where the room is listable
                     * @enum {integer}
                     */
                    scope: 0 | 1 | 2;
                };
            };
        };
        responses: {
            /** @description Made room listable successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Making room listable is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-password": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New password */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Password set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Setting password is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "type" | "value";
                                message?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-permissions": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
                /** @description Level of the permissions ('call' (removed in Talk 20), 'default') */
                mode: "call" | "default";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New permissions
                     */
                    permissions: number;
                };
            };
        };
        responses: {
            /** @description Permissions updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating permissions is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "mode" | "type" | "value";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-get-participants": {
        parameters: {
            query?: {
                /** @description Include the user statuses */
                includeStatus?: boolean;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Participants returned */
            200: {
                headers: {
                    "X-Nextcloud-Has-User-Statuses"?: boolean;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Participant"][];
                        };
                    };
                };
            };
            /** @description Missing permissions for getting participants */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-add-participant-to-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New participant */
                    newParticipant: string;
                    /**
                     * @description Source of the participant
                     * @default users
                     * @enum {string}
                     */
                    source?: "users" | "groups" | "circles" | "emails" | "federated_users" | "phones" | "teams";
                };
            };
        };
        responses: {
            /** @description Participant successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                type?: number;
                            };
                        };
                    };
                };
            };
            /** @description Adding participant is not possible, e.g. when the user is banned (check error attribute of response for detail key) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "ban" | "cloud-id" | "federation" | "moderator" | "new-participant" | "outgoing" | "reach-remote" | "room-type" | "sip" | "source" | "trusted-servers";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description User, group or other target to invite was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "ban" | "cloud-id" | "federation" | "moderator" | "new-participant" | "outgoing" | "reach-remote" | "room-type" | "sip" | "source" | "trusted-servers";
                            };
                        };
                    };
                };
            };
            /** @description SIP dial-out is not configured */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "ban" | "cloud-id" | "federation" | "moderator" | "new-participant" | "outgoing" | "reach-remote" | "room-type" | "sip" | "source" | "trusted-servers";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-get-breakout-room-participants": {
        parameters: {
            query?: {
                /** @description Include the user statuses */
                includeStatus?: boolean;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Breakout room participants returned */
            200: {
                headers: {
                    "X-Nextcloud-Has-User-Statuses"?: boolean;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Participant"][];
                        };
                    };
                };
            };
            /** @description Getting breakout room participants is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to get breakout room participants */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-remove-self-from-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Participant removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Removing participant is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "last-moderator" | "participant";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Participant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "last-moderator" | "participant";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-remove-attendee-from-room": {
        parameters: {
            query: {
                /** @description ID of the attendee */
                attendeeId: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attendee removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Removing attendee is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "last-moderator" | "owner" | "participant" | "room-type";
                            };
                        };
                    };
                };
            };
            /** @description Removing attendee is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "last-moderator" | "owner" | "participant" | "room-type";
                            };
                        };
                    };
                };
            };
            /** @description Attendee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "last-moderator" | "owner" | "participant" | "room-type";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-attendee-permissions": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of the attendee
                     */
                    attendeeId: number;
                    /**
                     * @description Method of updating permissions ('set', 'remove', 'add')
                     * @enum {string}
                     */
                    method: "set" | "remove" | "add";
                    /**
                     * Format: int64
                     * @description New permissions
                     */
                    permissions: number;
                };
            };
        };
        responses: {
            /** @description Permissions updated successfully */
            200: {
                headers: {
                    "X-Nextcloud-Has-User-Statuses"?: true;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Participant"][];
                        };
                    };
                };
            };
            /** @description Updating permissions is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "participant" | "method" | "moderator" | "room-type" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to update permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "participant" | "method" | "moderator" | "room-type" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Attendee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "participant" | "method" | "moderator" | "room-type" | "type" | "value";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-all-attendees-permissions": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Method of updating permissions ('set', 'remove', 'add')
                     * @enum {string}
                     */
                    method: "set" | "remove" | "add";
                    /**
                     * Format: int64
                     * @description New permissions
                     */
                    permissions: number;
                };
            };
        };
        responses: {
            /** @description Permissions updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating permissions is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-join-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                /** @description Token of the room */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Password of the room
                     * @default
                     */
                    password?: string;
                    /**
                     * @description Create a new session if necessary
                     * @default true
                     */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description Room joined successfully */
            200: {
                headers: {
                    "X-Nextcloud-Talk-Proxy-Hash"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Joining room is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "ban" | "password";
                            };
                        };
                    };
                };
            };
            /** @description Room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Session already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                sessionId: string;
                                /** Format: int64 */
                                inCall: number;
                                /** Format: int64 */
                                lastPing: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "room-leave-room": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                /** @description Token of the room */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully left the room */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-resend-invitations": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of the attendee
                     */
                    attendeeId?: number | null;
                };
            };
        };
        responses: {
            /** @description Invitation resent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Attendee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-session-state": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description of the room
                     * @enum {integer}
                     */
                    state: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Session state set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description The provided new state was invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description The participant did not have a session */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-promote-moderator": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of the attendee
                     */
                    attendeeId: number;
                };
            };
        };
        responses: {
            /** @description Attendee promoted to moderator successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Promoting attendee to moderator is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Promoting attendee to moderator is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Attendee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-demote-moderator": {
        parameters: {
            query: {
                /** @description ID of the attendee */
                attendeeId: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attendee demoted from moderator successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Demoting attendee from moderator is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Demoting attendee from moderator is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Attendee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-add-to-favorites": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully added room to favorites */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-remove-from-favorites": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed room from favorites */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-mark-conversation-as-important": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Conversation was marked as important */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-mark-conversation-as-unimportant": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Conversation was marked as unimportant */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-mark-conversation-as-sensitive": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Conversation was marked as sensitive */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-mark-conversation-as-insensitive": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Conversation was marked as insensitive */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-notification-level": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New level
                     */
                    level: number;
                };
            };
        };
        responses: {
            /** @description Notification level updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating notification level is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "level";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-notification-calls": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New level
                     */
                    level: number;
                };
            };
        };
        responses: {
            /** @description Call notification level updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating call notification level is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "level";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-set-lobby": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New state
                     * @enum {integer}
                     */
                    state: 0 | 1;
                    /**
                     * Format: int64
                     * @description Timer when the lobby will be removed
                     * @default null
                     */
                    timer?: number | null;
                };
            };
        };
        responses: {
            /** @description Lobby state updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating lobby state is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "object" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-setsip-enabled": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New state
                     * @enum {integer}
                     */
                    state: 0 | 1 | 2;
                };
            };
        };
        responses: {
            /** @description SIP enabled state updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating SIP enabled state is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "token" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description User not found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "config";
                            };
                        };
                    } | {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Missing permissions to update SIP enabled state */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "config";
                            };
                        };
                    };
                };
            };
            /** @description SIP not configured */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "config";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-recording-consent": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New consent setting for the conversation (Only {@see RecordingService::CONSENT_REQUIRED_NO} and {@see RecordingService::CONSENT_REQUIRED_YES} are allowed here.)
                     */
                    recordingConsent: number;
                };
            };
        };
        responses: {
            /** @description Recording consent requirement set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Setting recording consent requirement is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "call" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description No recording server is configured */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "config";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-message-expiration": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New time
                     */
                    seconds: number;
                };
            };
        };
        responses: {
            /** @description Message expiration time updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating message expiration time is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "type" | "value";
                            };
                        };
                    };
                };
            };
        };
    };
    "room-get-capabilities": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get capabilities successfully */
            200: {
                headers: {
                    "X-Nextcloud-Talk-Hash"?: string;
                    "X-Nextcloud-Talk-Proxy-Hash"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Capabilities"] | {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    "room-set-mention-permissions": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New mention permissions
                     * @enum {integer}
                     */
                    mentionPermissions: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Permissions updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Updating permissions is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "breakout-room" | "type" | "value";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-archive-conversation": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Conversation was archived */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-unarchive-conversation": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Conversation was unarchived */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-import-emails-as-participants": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description When set to true, the file is validated and no email is actually sent nor any participant added to the conversation
                     * @default false
                     */
                    testRun?: boolean;
                };
            };
        };
        responses: {
            /** @description All entries imported successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                invites: number;
                                /** Format: int64 */
                                duplicates: number;
                                /** Format: int64 */
                                invalid?: number;
                                invalidLines?: number[];
                                /** Format: int64 */
                                type?: number;
                            };
                        };
                    };
                };
            };
            /** @description Import was not successful. When message is provided the string is in user language and should be displayed as an error. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "room" | "file" | "header-email" | "header-name" | "rows";
                                message?: string;
                                /** Format: int64 */
                                invites?: number;
                                /** Format: int64 */
                                duplicates?: number;
                                /** Format: int64 */
                                invalid?: number;
                                invalidLines?: number[];
                                /** Format: int64 */
                                type?: number;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "room-schedule-meeting": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v4";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Last part of the calendar URI as seen by the participant e.g. 'personal' or 'company_shared_by_other_user' */
                    calendarUri: string;
                    /**
                     * Format: int64
                     * @description Unix timestamp when the meeting starts
                     */
                    start: number;
                    /**
                     * @description List of attendee ids to invite, if null everyone will be invited, if empty array only the actor will receive the event
                     * @default null
                     */
                    attendeeIds?: number[] | null;
                    /**
                     * Format: int64
                     * @description Unix timestamp when the meeting ends, falls back to 60 minutes after start
                     * @default null
                     */
                    end?: number | null;
                    /**
                     * @description Title or summary of the event, falling back to the conversation name if none is given
                     * @default null
                     */
                    title?: string | null;
                    /**
                     * @description Description of the event, falling back to the conversation description if none is given
                     * @default null
                     */
                    description?: string | null;
                };
            };
        };
        responses: {
            /** @description Meeting scheduled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Meeting could not be created successfully */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "calendar" | "conversation" | "email" | "end" | "start";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "settings-set-user-setting": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Key to update
                     * @enum {string}
                     */
                    key: "attachment_folder" | "read_status_privacy" | "typing_privacy" | "play_sounds";
                    /** @description New value for the key */
                    value?: (string | number) | null;
                };
            };
        };
        responses: {
            /** @description User setting updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Updating user setting is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "signaling-get-settings": {
        parameters: {
            query?: {
                /** @description Token of the room */
                token?: string;
            };
            header: {
                /** @description Random seed used to generate the request checksum */
                "talk-recording-random"?: string;
                /** @description Checksum over the request body to verify authenticity from the recording backend */
                "talk-recording-checksum"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v3";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signaling settings returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["SignalingSettings"];
                        };
                    };
                };
            };
            /** @description Recording request invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "signaling-pull-messages": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v3";
                /** @description Token of the room */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signaling messages returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                type: string;
                                data: components["schemas"]["SignalingSession"][] | string;
                            }[];
                        };
                    };
                };
            };
            /** @description Getting signaling messages is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: string;
                        };
                    };
                };
            };
            /** @description Session, room or participant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                type: string;
                                data: components["schemas"]["SignalingSession"][] | string;
                            }[];
                        };
                    };
                };
            };
            /** @description Session killed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                type: string;
                                data: components["schemas"]["SignalingSession"][] | string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    "signaling-send-messages": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v3";
                /** @description Token of the room */
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description JSON encoded messages */
                    messages: string;
                };
            };
        };
        responses: {
            /** @description Signaling message sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Sending signaling message is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: string;
                        };
                    };
                };
            };
        };
    };
    "temp_avatar-post-avatar": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Avatar uploaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Uploading avatar is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "temp_avatar-delete-avatar": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Avatar deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Deleting avatar is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "avatar";
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "chat-receive-messages": {
        parameters: {
            query: {
                /** @description Polling for new messages (1) or getting the history of the chat (0) */
                lookIntoFuture: 0 | 1;
                /** @description Number of chat messages to receive (100 by default, 200 at most) */
                limit?: number;
                /** @description The last known message (serves as offset) */
                lastKnownMessageId?: number;
                /** @description The last known common read message (so the response is 200 instead of 304 when it changes even when there are no messages) */
                lastCommonReadId?: number;
                /** @description Number of seconds to wait for new messages (30 by default, 30 at most) */
                timeout?: number;
                /** @description Automatically set the last read marker when 1, if your client does this itself via chat/{token}/read set to 0 */
                setReadMarker?: 0 | 1;
                /** @description Include the $lastKnownMessageId in the messages when 1 (default 0) */
                includeLastKnown?: 0 | 1;
                /** @description When the user status should not be automatically set to online set to 1 (default 0) */
                noStatusUpdate?: 0 | 1;
                /** @description Set to 0 when notifications should not be marked as read (default 1) */
                markNotificationsAsRead?: 0 | 1;
                /** @description Limit the chat message list to a given thread */
                threadId?: number;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Messages returned */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    "X-Chat-Last-Given"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"][];
                        };
                    };
                };
            };
            /** @description No messages */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "chat-send-message": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description the message to send */
                    message: string;
                    /**
                     * @description for guests
                     * @default
                     */
                    actorDisplayName?: string;
                    /**
                     * @description for the message to be able to later identify it again
                     * @default
                     */
                    referenceId?: string;
                    /**
                     * Format: int64
                     * @description Parent id which this message is a reply to
                     * @default 0
                     */
                    replyTo?: number;
                    /**
                     * @description If sent silent the chat message will not create any notifications
                     * @default false
                     */
                    silent?: boolean;
                    /**
                     * @description Only supported when not replying, when given will create a thread (requires `threads` capability)
                     * @default
                     */
                    threadTitle?: string;
                    /**
                     * Format: int64
                     * @description Thread id which this message is a reply to without quoting a specific message (ignored when $replyTo is given, also requires `threads` capability)
                     * @default 0
                     */
                    threadId?: number;
                };
            };
        };
        responses: {
            /** @description Message sent successfully */
            201: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"] | null;
                        };
                    };
                };
            };
            /** @description Sending message is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Actor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Message too long */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Mention rate limit exceeded (guests only) */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-clear-history": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description History cleared successfully */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessage"];
                        };
                    };
                };
            };
            /** @description History cleared successfully, but Federation or Matterbridge is configured, so the information can be replicated elsewhere */
            202: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessage"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Missing permissions to clear history */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "chat-get-objects-shared-in-room": {
        parameters: {
            query: {
                /** @description Type of the objects */
                objectType: string;
                /** @description ID of the last known message */
                lastKnownMessageId?: number;
                /** @description Maximum number of objects */
                limit?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of shared objects messages returned */
            200: {
                headers: {
                    "X-Chat-Last-Given"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["ChatMessage"];
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-share-object-to-chat": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Type of the object */
                    objectType: string;
                    /** @description ID of the object */
                    objectId: string;
                    /**
                     * @description Additional metadata, sample value: `{\"type\":\"geo-location\",\"id\":\"geo:52.5450511,13.3741463\",\"name\":\"Nextcloud Berlin Office\",\"latitude\":\"52.5450511\",\"longitude\":\"13.3741463\"}`
                     * @default
                     */
                    metaData?: string;
                    /**
                     * @description Guest name
                     * @default
                     */
                    actorDisplayName?: string;
                    /**
                     * @description Reference ID
                     * @default
                     */
                    referenceId?: string;
                    /**
                     * Format: int64
                     * @description Thread id which this message is a reply to without quoting a specific message (also requires `threads` capability)
                     * @default 0
                     */
                    threadId?: number;
                };
            };
        };
        responses: {
            /** @description Object shared successfully */
            201: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"] | null;
                        };
                    };
                };
            };
            /** @description Sharing object is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Actor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Message too long */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-summarize-chat": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Offset from where on the summary should be generated
                     */
                    fromMessageId: number;
                };
            };
        };
        responses: {
            /** @description Summary was scheduled, use the returned taskId to get the status information and output from the TaskProcessing API: [OCS TaskProcessing API](https://docs.nextcloud.com/server/latest/developer_manual/client_apis/OCS/ocs-taskprocessing-api.html#fetch-a-task-by-id). If the response data contains nextOffset, not all messages could be handled in a single request. After receiving the response a second summary should be requested with the provided nextOffset. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                taskId: number;
                                /** Format: int64 */
                                nextOffset?: number;
                            };
                        };
                    };
                };
            };
            /** @description No messages found to summarize */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No AI provider available or summarizing failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "ai-no-provider" | "ai-error";
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    "chat-get-message-context": {
        parameters: {
            query?: {
                /** @description Number of chat messages to receive in both directions (50 by default, 100 at most, might return 201 messages) */
                limit?: number;
                /** @description Limit the chat message list to a given thread */
                threadId?: number;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description The focused message which should be in the "middle" of the returned context */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message context returned */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    "X-Chat-Last-Given"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"][];
                        };
                    };
                };
            };
            /** @description No messages */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "chat-edit-message": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description the message to send */
                    message: string;
                };
            };
        };
        responses: {
            /** @description Message edited successfully */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"];
                        };
                    };
                };
            };
            /** @description Message edited successfully, but a bot or Matterbridge is configured, so the information can be replicated to other services */
            202: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"];
                        };
                    };
                };
            };
            /** @description Editing message is not possible, e.g. when the new message is empty or the message is too old */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to edit message */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Editing this message type is not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Message too long */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-delete-message": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message deleted successfully */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"];
                        };
                    };
                };
            };
            /** @description Message deleted successfully, but a bot or Matterbridge is configured, so the information can be replicated elsewhere */
            202: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMessageWithParent"];
                        };
                    };
                };
            };
            /** @description Deleting message is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to delete message */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
            /** @description Deleting this message type is not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-get-reminder": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reminder returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatReminder"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-set-reminder": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Timestamp of the reminder
                     */
                    timestamp: number;
                };
            };
        };
        responses: {
            /** @description Reminder created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatReminder"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-delete-reminder": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description ID of the message */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reminder deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error?: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-get-upcoming-reminders": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reminders returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatReminderUpcoming"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "chat-set-read-marker": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID if the last read message (Optional only with `chat-read-last` capability)
                     * @default null
                     */
                    lastReadMessage?: number | null;
                };
            };
        };
        responses: {
            /** @description Read marker set successfully */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
        };
    };
    "chat-mark-unread": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Read marker set successfully */
            200: {
                headers: {
                    "X-Chat-Last-Common-Read"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Room"];
                        };
                    };
                };
            };
        };
    };
    "chat-get-objects-shared-in-room-overview": {
        parameters: {
            query?: {
                /** @description Maximum number of objects */
                limit?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of shared objects messages of each type returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["ChatMessage"][];
                            };
                        };
                    };
                };
            };
        };
    };
    "chat-mentions": {
        parameters: {
            query: {
                /** @description Text to search for */
                search: string;
                /** @description Maximum number of results */
                limit?: number;
                /** @description Include the user statuses */
                includeStatus?: boolean;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of mention suggestions returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ChatMentionSuggestion"][];
                        };
                    };
                };
            };
        };
    };
    "live_transcription-enable": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Live transcription enabled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description The participant is not in the call */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "app" | "in-call";
                            };
                        };
                    };
                };
            };
        };
    };
    "live_transcription-disable": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Live transcription stopped successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description The participant is not in the call */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "app" | "in-call";
                            };
                        };
                    };
                };
            };
        };
    };
    "live_transcription-get-available-languages": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Available languages got successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: components["schemas"]["LiveTranscriptionLanguage"];
                            };
                        };
                    };
                };
            };
            /** @description The external app "live_transcription" is not available */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "app";
                            };
                        };
                    };
                };
            };
        };
    };
    "live_transcription-set-language": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description the ID of the language to set */
                    languageId: string;
                };
            };
        };
        responses: {
            /** @description Language set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description The external app "live_transcription" is not available */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "app";
                            };
                        };
                    };
                };
            };
            /** @description Participant is not a moderator */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "app";
                            };
                        };
                    };
                };
            };
        };
    };
    "thread-get-recent-active-threads": {
        parameters: {
            query?: {
                /** @description Number of threads to return */
                limit?: number;
            };
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of threads returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ThreadInfo"][];
                        };
                    };
                };
            };
        };
    };
    "thread-get-subscribed-threads": {
        parameters: {
            query?: {
                /** @description Number of threads to return */
                limit?: number;
                /** @description Offset in the threads list */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of threads returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ThreadInfo"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "thread-get-thread": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description The thread ID to get the info for */
                threadId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Thread info returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ThreadInfo"];
                        };
                    };
                };
            };
            /** @description Thread not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "thread" | "status";
                            };
                        };
                    };
                };
            };
        };
    };
    "thread-rename-thread": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description The thread ID to get the info for */
                threadId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New thread title, must not be empty */
                    threadTitle: string;
                };
            };
        };
        responses: {
            /** @description Thread renamed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ThreadInfo"];
                        };
                    };
                };
            };
            /** @description When the provided title is empty */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "title";
                            };
                        };
                    };
                };
            };
            /** @description Not allowed, either not the original author or not a moderator */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "permission";
                            };
                        };
                    };
                };
            };
            /** @description Thread not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "thread";
                            };
                        };
                    };
                };
            };
        };
    };
    "thread-set-notification-level": {
        parameters: {
            query?: never;
            header: {
                /** @description Set to 1 when the request is performed by another Nextcloud Server to indicate a federation request */
                "x-nextcloud-federation"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                token: string;
                /** @description The message to create a thread for (Doesn't have to be the root) */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description New level
                     */
                    level: number;
                };
            };
        };
        responses: {
            /** @description Successfully set notification level for thread */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ThreadInfo"];
                        };
                    };
                };
            };
            /** @description Notification level was invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "level" | "message" | "status" | "top-most";
                            };
                        };
                    };
                };
            };
            /** @description Message or top most message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                error: "level" | "message" | "status" | "top-most";
                            };
                        };
                    };
                };
            };
        };
    };
}
