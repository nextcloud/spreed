/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = {
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar": {
    /** Get the avatar of a room */
    get: operations["avatar-get-avatar"];
    /** Upload an avatar for a room */
    post: operations["avatar-upload-avatar"];
    /** Delete the avatar of a room */
    delete: operations["avatar-delete-avatar"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar/emoji": {
    /** Set an emoji as avatar */
    post: operations["avatar-emoji-avatar"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar/dark": {
    /** Get the dark mode avatar of a room */
    get: operations["avatar-get-avatar-dark"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}": {
    /** List bots */
    get: operations["bot-list-bots"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}/{botId}": {
    /** Enables a bot */
    post: operations["bot-enable-bot"];
    /** Disables a bot */
    delete: operations["bot-disable-bot"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}": {
    /** Configure the breakout rooms */
    post: operations["breakout_room-configure-breakout-rooms"];
    /** Remove the breakout rooms */
    delete: operations["breakout_room-remove-breakout-rooms"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/broadcast": {
    /** Broadcast a chat message to all breakout rooms */
    post: operations["breakout_room-broadcast-chat-message"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/attendees": {
    /** Apply an attendee map to the breakout rooms */
    post: operations["breakout_room-apply-attendee-map"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/request-assistance": {
    /** Request assistance */
    post: operations["breakout_room-request-assistance"];
    /** Reset the request for assistance */
    delete: operations["breakout_room-reset-request-for-assistance"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/rooms": {
    /** Start the breakout rooms */
    post: operations["breakout_room-start-breakout-rooms"];
    /** Stop the breakout rooms */
    delete: operations["breakout_room-stop-breakout-rooms"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/switch": {
    /** Switch to another breakout room */
    post: operations["breakout_room-switch-breakout-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}": {
    /** Get the peers for a call */
    get: operations["call-get-peers-for-call"];
    /** Update the in-call flags */
    put: operations["call-update-call-flags"];
    /** Join a call */
    post: operations["call-join-call"];
    /** Leave a call */
    delete: operations["call-leave-call"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/ring/{attendeeId}": {
    /** Ring an attendee */
    post: operations["call-ring-attendee"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/dialout/{attendeeId}": {
    /** Call a SIP dial-out attendee */
    post: operations["call-sip-dial-out"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}": {
    /**
     * Receives chat messages from the given room
     * @description - Receiving the history ($lookIntoFuture=0): The next $limit messages after $lastKnownMessageId will be returned. The new $lastKnownMessageId for the follow up query is available as `X-Chat-Last-Given` header.
     * - Looking into the future ($lookIntoFuture=1): If there are currently no messages the response will not be sent immediately. Instead, HTTP connection will be kept open waiting for new messages to arrive and, when they do, then the response will be sent. The connection will not be kept open indefinitely, though; the number of seconds to wait for new messages to arrive can be set using the timeout parameter; the default timeout is 30 seconds, maximum timeout is 60 seconds. If the timeout ends a successful but empty response will be sent. If messages have been returned (status=200) the new $lastKnownMessageId for the follow up query is available as `X-Chat-Last-Given` header.
     * The limit specifies the maximum number of messages that will be returned, although the actual number of returned messages could be lower if some messages are not visible to the participant. Note that if none of the messages are visible to the participant the returned number of messages will be 0, yet the status will still be 200. Also note that `X-Chat-Last-Given` may reference a message not visible and thus not returned, but it should be used nevertheless as the $lastKnownMessageId for the follow-up query.
     */
    get: operations["chat-receive-messages"];
    /**
     * Sends a new chat message to the given room
     * @description The author and timestamp are automatically set to the current user/guest and time.
     */
    post: operations["chat-send-message"];
    /** Clear the chat history */
    delete: operations["chat-clear-history"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/{messageId}": {
    /** Edit a chat message */
    put: operations["chat-edit-message"];
    /** Delete a chat message */
    delete: operations["chat-delete-message"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/{messageId}/context": {
    /** Get the context of a message */
    get: operations["chat-get-message-context"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/{messageId}/reminder": {
    /** Get the reminder for a chat message */
    get: operations["chat-get-reminder"];
    /** Set a reminder for a chat message */
    post: operations["chat-set-reminder"];
    /** Delete a chat reminder */
    delete: operations["chat-delete-reminder"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/read": {
    /** Set the read marker to a specific message */
    post: operations["chat-set-read-marker"];
    /** Mark a chat as unread */
    delete: operations["chat-mark-unread"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/mentions": {
    /** Search for mentions */
    get: operations["chat-mentions"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/share": {
    /** Get objects that are shared in the room */
    get: operations["chat-get-objects-shared-in-room"];
    /**
     * Sends a rich-object to the given room
     * @description The author and timestamp are automatically set to the current user/guest and time.
     */
    post: operations["chat-share-object-to-chat"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/chat/{token}/share/overview": {
    /** Get objects that are shared in the room overview */
    get: operations["chat-get-objects-shared-in-room-overview"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/file/{fileId}": {
    /**
     * Get the token of the room associated to the given file id
     * @description This is the counterpart of self::getRoomByShareToken() for file ids instead of share tokens, although both return the same room token if the given file id and share token refer to the same file.
     * If there is no room associated to the given file id a new room is created; the new room is a public room associated with a "file" object with the given file id. Unlike normal rooms in which the owner is the user that created the room these are special rooms without owner (although self joined users with direct access to the file become persistent participants automatically when they join until they explicitly leave or no longer have access to the file).
     * In any case, to create or even get the token of the room, the file must be shared and the user must be the owner of a public share of the file (like a link share, for example) or have direct access to that file; an error is returned otherwise. A user has direct access to a file if she has access to it (or to an ancestor) through a user, group, circle or room share (but not through a link share, for example), or if she is the owner of such a file.
     */
    get: operations["files_integration-get-room-by-file-id"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/publicshare/{shareToken}": {
    /**
     * Returns the token of the room associated to the file of the given share token
     * @description This is the counterpart of self::getRoomByFileId() for share tokens instead of file ids, although both return the same room token if the given file id and share token refer to the same file.
     * If there is no room associated to the file id of the given share token a new room is created; the new room is a public room associated with a "file" object with the file id of the given share token. Unlike normal rooms in which the owner is the user that created the room these are special rooms without owner (although self joined users with direct access to the file become persistent participants automatically when they join until they explicitly leave or no longer have access to the file).
     * In any case, to create or even get the token of the room, the file must be publicly shared (like a link share, for example); an error is returned otherwise.
     * Besides the token of the room this also returns the current user ID and display name, if any; this is needed by the Talk sidebar to know the actual current user, as the public share page uses the incognito mode and thus logged-in users as seen as guests.
     */
    get: operations["files_integration-get-room-by-share-token"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/guest/{token}/name": {
    /** Set the display name as a guest */
    post: operations["guest-set-display-name"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/bridge/{token}": {
    /** Get bridge information of one room */
    get: operations["matterbridge-get-bridge-of-room"];
    /** Edit bridge information of one room */
    put: operations["matterbridge-edit-bridge-of-room"];
    /** Delete bridge of one room */
    delete: operations["matterbridge-delete-bridge-of-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/bridge/{token}/process": {
    /** Get bridge process information */
    get: operations["matterbridge-get-bridge-process-state"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}": {
    /** Create a poll */
    post: operations["poll-create-poll"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/{pollId}": {
    /** Get a poll */
    get: operations["poll-show-poll"];
    /** Vote on a poll */
    post: operations["poll-vote-poll"];
    /** Close a poll */
    delete: operations["poll-close-poll"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/publicshareauth": {
    /**
     * Creates a new room for video verification (requesting the password of a share)
     * @description The new room is a public room associated with a "share:password" object with the ID of the share token. Unlike normal rooms in which the owner is the user that created the room these are special rooms always created by a guest or user on behalf of a registered user, the sharer, who will be the owner of the room.
     * The share must have "send password by Talk" enabled; an error is returned otherwise.
     */
    post: operations["files_integration-create-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/reaction/{token}/{messageId}": {
    /** Get a list of reactions for a message */
    get: operations["reaction-get-reactions"];
    /** Add a reaction to a message */
    post: operations["reaction-react"];
    /** Delete a reaction from a message */
    delete: operations["reaction-delete"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/recording/{token}": {
    /** Start the recording */
    post: operations["recording-start"];
    /** Stop the recording */
    delete: operations["recording-stop"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/recording/{token}/notification": {
    /** Dismiss the store call recording notification */
    delete: operations["recording-notification-dismiss"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/recording/{token}/share-chat": {
    /** Share the recorded file to the chat */
    post: operations["recording-share-to-chat"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room": {
    /** Get all currently existent rooms which the user has joined */
    get: operations["room-get-rooms"];
    /** Create a room with a user, a group or a circle */
    post: operations["room-create-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/listed-room": {
    /** Get listed rooms with optional search term */
    get: operations["room-get-listed-rooms"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/note-to-self": {
    /**
     * Get the "Note to self" conversation for the user
     * @description It will be automatically created when it is currently missing
     */
    get: operations["room-get-note-to-self-conversation"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}": {
    /** Get a room */
    get: operations["room-get-single-room"];
    /** Rename a room */
    put: operations["room-rename-room"];
    /** Delete a room */
    delete: operations["room-delete-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/breakout-rooms": {
    /**
     * Get breakout rooms
     * @description All for moderators and in case of "free selection", or the assigned breakout room for other participants
     */
    get: operations["room-get-breakout-rooms"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/public": {
    /** Allowed guests to join conversation */
    post: operations["room-make-public"];
    /** Disallowed guests to join conversation */
    delete: operations["room-make-private"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/description": {
    /** Update the description of a room */
    put: operations["room-set-description"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/read-only": {
    /** Set read-only state of a room */
    put: operations["room-set-read-only"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/listable": {
    /** Make a room listable */
    put: operations["room-set-listable"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/password": {
    /** Set a password for a room */
    put: operations["room-set-password"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/permissions/{mode}": {
    /** Update the permissions of a room */
    put: operations["room-set-permissions"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants": {
    /** Get a list of participants for a room */
    get: operations["room-get-participants"];
    /** Add a participant to a room */
    post: operations["room-add-participant-to-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/breakout-rooms/participants": {
    /** Get the breakout room participants for a room */
    get: operations["room-get-breakout-room-participants"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/self": {
    /** Remove the current user from a room */
    delete: operations["room-remove-self-from-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees": {
    /** Remove an attendee from a room */
    delete: operations["room-remove-attendee-from-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees/permissions": {
    /** Update the permissions of an attendee */
    put: operations["room-set-attendee-permissions"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees/permissions/all": {
    /** Update the permissions of all attendees */
    put: operations["room-set-all-attendees-permissions"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/active": {
    /** Join a room */
    post: operations["room-join-room"];
    /** Leave a room */
    delete: operations["room-leave-room"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/resend-invitations": {
    /** Resend invitations */
    post: operations["room-resend-invitations"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/state": {
    /** Set active state for a session */
    put: operations["room-set-session-state"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/moderators": {
    /** Promote an attendee to moderator */
    post: operations["room-promote-moderator"];
    /** Demote an attendee from moderator */
    delete: operations["room-demote-moderator"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/favorite": {
    /** Add a room to the favorites */
    post: operations["room-add-to-favorites"];
    /** Remove a room from the favorites */
    delete: operations["room-remove-from-favorites"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/notify": {
    /** Update the notification level for a room */
    post: operations["room-set-notification-level"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/notify-calls": {
    /** Update call notifications */
    post: operations["room-set-notification-calls"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/webinar/lobby": {
    /** Update the lobby state for a room */
    put: operations["room-set-lobby"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/webinar/sip": {
    /** Update SIP enabled state */
    put: operations["room-setsip-enabled"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/recording-consent": {
    /** Set recording consent requirement for this conversation */
    put: operations["room-set-recording-consent"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/message-expiration": {
    /** Update message expiration time */
    post: operations["room-set-message-expiration"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/capabilities": {
    /**
     * Get capabilities for a room
     * @description See "Capability handling in federated conversations" in https://github.com/nextcloud/spreed/issues/10680 to learn which capabilities should be considered from the local server or from the remote server.
     */
    get: operations["room-get-capabilities"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/settings/user": {
    /** Update user setting */
    post: operations["settings-set-user-setting"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/signaling/settings": {
    /** Get the signaling settings */
    get: operations["internal_signaling-external_signaling-get-settings"];
  };
  "/ocs/v2.php/apps/spreed/api/{apiVersion}/signaling/{token}": {
    /** Get signaling messages */
    get: operations["internal_signaling-pull-messages"];
    /** Send signaling messages */
    post: operations["internal_signaling-send-messages"];
  };
  "/ocs/v2.php/apps/spreed/temp-user-avatar": {
    /** Upload your avatar as a user */
    post: operations["user_avatar-post-avatar"];
    /** Delete your avatar as a user */
    delete: operations["user_avatar-delete-avatar"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    Bot: {
      description: string | null;
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      state: number;
    };
    CallPeer: {
      actorId: string;
      actorType: string;
      displayName: string;
      /** Format: int64 */
      lastPing: number;
      sessionId: string;
      token: string;
    };
    Capabilities: {
      features: string[];
      config: {
        attachments: {
          allowed: boolean;
          folder?: string;
        };
        call: {
          enabled: boolean;
          "breakout-rooms": boolean;
          recording: boolean;
          /** Format: int64 */
          "recording-consent": number;
          "supported-reactions": string[];
          "predefined-backgrounds": string[];
          "can-upload-background": boolean;
          "sip-enabled": boolean;
          "sip-dialout-enabled": boolean;
          "can-enable-sip": boolean;
        };
        chat: {
          /** Format: int64 */
          "max-length": number;
          /** Format: int64 */
          "read-privacy": number;
          "has-translation-providers": boolean;
          /** Format: int64 */
          "typing-privacy": number;
        };
        conversations: {
          "can-create": boolean;
        };
        federation: {
          enabled: boolean;
          "incoming-enabled": boolean;
          "outgoing-enabled": boolean;
          "only-trusted-servers": boolean;
        };
        previews: {
          /** Format: int64 */
          "max-gif-size": number;
        };
        signaling: {
          /** Format: int64 */
          "session-ping-limit": number;
          "hello-v2-token-key"?: string;
        };
      };
      version: string;
    };
    ChatMentionSuggestion: {
      id: string;
      label: string;
      source: string;
      mentionId: string;
      status: string | null;
      /** Format: int64 */
      statusClearAt: number | null;
      statusIcon: string | null;
      statusMessage: string | null;
    };
    ChatMessage: {
      actorDisplayName: string;
      actorId: string;
      actorType: string;
      /** @enum {boolean} */
      deleted?: true;
      /** Format: int64 */
      expirationTimestamp: number;
      /** Format: int64 */
      id: number;
      isReplyable: boolean;
      markdown: boolean;
      message: string;
      messageParameters: {
        [key: string]: components["schemas"]["RichObjectParameter"];
      };
      messageType: string;
      reactions: {
        [key: string]: number;
      };
      referenceId: string;
      systemMessage: string;
      /** Format: int64 */
      timestamp: number;
      token: string;
      lastEditActorDisplayName?: string;
      lastEditActorId?: string;
      lastEditActorType?: string;
      /** Format: int64 */
      lastEditTimestamp?: number;
      silent?: boolean;
    };
    ChatMessageWithParent: components["schemas"]["ChatMessage"] & {
      parent?: components["schemas"]["ChatMessage"];
    };
    ChatReminder: {
      /** Format: int64 */
      messageId: number;
      /** Format: int64 */
      timestamp: number;
      token: string;
      userId: string;
    };
    Matterbridge: {
      enabled: boolean;
      parts: components["schemas"]["MatterbridgeConfigFields"];
      /** Format: int64 */
      pid: number;
    };
    MatterbridgeConfigFields: {
        [key: string]: Record<string, never>;
      }[];
    MatterbridgeProcessState: {
      log: string;
      running: boolean;
    };
    MatterbridgeWithProcessState: components["schemas"]["Matterbridge"] & components["schemas"]["MatterbridgeProcessState"];
    OCSMeta: {
      status: string;
      statuscode: number;
      message?: string;
      totalitems?: string;
      itemsperpage?: string;
    };
    Participant: {
      actorId: string;
      actorType: string;
      /** Format: int64 */
      attendeeId: number;
      /** Format: int64 */
      attendeePermissions: number;
      attendeePin: string;
      displayName: string;
      /** Format: int64 */
      inCall: number;
      /** Format: int64 */
      lastPing: number;
      /** Format: int64 */
      participantType: number;
      /** Format: int64 */
      permissions: number;
      roomToken: string;
      sessionIds: string[];
      status?: string;
      /** Format: int64 */
      statusClearAt?: number | null;
      statusIcon?: string | null;
      statusMessage?: string | null;
      phoneNumber?: string | null;
      callId?: string | null;
    };
    Poll: {
      actorDisplayName: string;
      actorId: string;
      actorType: string;
      details?: components["schemas"]["PollVote"][];
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      maxVotes: number;
      /** Format: int64 */
      numVoters?: number;
      options: string[];
      question: string;
      /** Format: int64 */
      resultMode: number;
      /** Format: int64 */
      status: number;
      votedSelf?: number[];
      votes?: {
        [key: string]: number;
      };
    };
    PollVote: {
      actorDisplayName: string;
      actorId: string;
      actorType: string;
      /** Format: int64 */
      optionId: number;
    };
    PublicCapabilities: OneOf<[{
      spreed: components["schemas"]["Capabilities"];
    }, unknown[]]>;
    Reaction: {
      actorDisplayName: string;
      actorId: string;
      actorType: string;
      /** Format: int64 */
      timestamp: number;
    };
    RichObjectParameter: {
      type: string;
      id: string;
      name: string;
      server?: string;
      link?: string;
      /** @enum {string} */
      "call-type"?: "one2one" | "group" | "public";
      "icon-url"?: string;
      "message-id"?: string;
      boardname?: string;
      stackname?: string;
      /** Format: int64 */
      size?: number;
      path?: string;
      mimetype?: string;
      /** @enum {string} */
      "preview-available"?: "yes" | "no";
      mtime?: string;
      latitude?: string;
      longitude?: string;
      description?: string;
      thumb?: string;
      website?: string;
      /** @enum {string} */
      visibility?: "0" | "1";
      /** @enum {string} */
      assignable?: "0" | "1";
      conversation?: string;
    };
    Room: {
      actorId: string;
      actorType: string;
      /** Format: int64 */
      attendeeId: number;
      /** Format: int64 */
      attendeePermissions: number;
      attendeePin: string | null;
      avatarVersion: string;
      /** Format: int64 */
      breakoutRoomMode: number;
      /** Format: int64 */
      breakoutRoomStatus: number;
      /** Format: int64 */
      callFlag: number;
      /** Format: int64 */
      callPermissions: number;
      /** Format: int64 */
      callRecording: number;
      /** Format: int64 */
      callStartTime: number;
      canDeleteConversation: boolean;
      canEnableSIP: boolean;
      canLeaveConversation: boolean;
      canStartCall: boolean;
      /** Format: int64 */
      defaultPermissions: number;
      description: string;
      displayName: string;
      hasCall: boolean;
      hasPassword: boolean;
      /** Format: int64 */
      id: number;
      isCustomAvatar: boolean;
      isFavorite: boolean;
      /** Format: int64 */
      lastActivity: number;
      /** Format: int64 */
      lastCommonReadMessage: number;
      lastMessage: components["schemas"]["RoomLastMessage"] | unknown[];
      /** Format: int64 */
      lastPing: number;
      /** Format: int64 */
      lastReadMessage: number;
      /** Format: int64 */
      listable: number;
      /** Format: int64 */
      lobbyState: number;
      /** Format: int64 */
      lobbyTimer: number;
      /** Format: int64 */
      messageExpiration: number;
      name: string;
      /** Format: int64 */
      notificationCalls: number;
      /** Format: int64 */
      notificationLevel: number;
      objectId: string;
      objectType: string;
      /** Format: int64 */
      participantFlags: number;
      /** Format: int64 */
      participantType: number;
      /** Format: int64 */
      permissions: number;
      /** Format: int64 */
      readOnly: number;
      /** Format: int64 */
      recordingConsent: number;
      sessionId: string;
      /** Format: int64 */
      sipEnabled: number;
      status?: string;
      /** Format: int64 */
      statusClearAt?: number | null;
      statusIcon?: string | null;
      statusMessage?: string | null;
      token: string;
      /** Format: int64 */
      type: number;
      unreadMention: boolean;
      unreadMentionDirect: boolean;
      /** Format: int64 */
      unreadMessages: number;
    };
    RoomLastMessage: components["schemas"]["ChatMessage"] | components["schemas"]["RoomProxyMessage"];
    RoomProxyMessage: {
      actorDisplayName: string;
      actorId: string;
      actorType: string;
      /** Format: int64 */
      expirationTimestamp: number;
      message: string;
      messageParameters: {
        [key: string]: components["schemas"]["RichObjectParameter"];
      };
      messageType: string;
      systemMessage: string;
    };
    SignalingSession: {
      /** Format: int64 */
      inCall: number;
      /** Format: int64 */
      lastPing: number;
      /** Format: int64 */
      participantPermissions: number;
      /** Format: int64 */
      roomId: number;
      sessionId: string;
      userId: string;
    };
    SignalingSettings: {
      helloAuthParams: {
        "1.0": {
          userid: string | null;
          ticket: string;
        };
        "2.0": {
          token: string;
        };
      };
      hideWarning: boolean;
      server: string;
      signalingMode: string;
      sipDialinInfo: string;
      stunservers: {
          urls: string[];
        }[];
      ticket: string;
      turnservers: {
          urls: string[];
          username: string;
          credential: Record<string, never>;
        }[];
      userId: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /** Get the avatar of a room */
  "avatar-get-avatar": {
    parameters: {
      query?: {
        /** @description Theme used for background */
        darkTheme?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Room avatar returned */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Upload an avatar for a room */
  "avatar-upload-avatar": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Avatar uploaded successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Avatar invalid */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** Delete the avatar of a room */
  "avatar-delete-avatar": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Avatar removed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
    };
  };
  /** Set an emoji as avatar */
  "avatar-emoji-avatar": {
    parameters: {
      query: {
        /** @description Emoji */
        emoji: string;
        /** @description Color of the emoji */
        color?: string | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Avatar set successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Setting emoji avatar is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** Get the dark mode avatar of a room */
  "avatar-get-avatar-dark": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Room avatar returned */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** List bots */
  "bot-list-bots": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Bot list returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Bot"][];
            };
          };
        };
      };
    };
  };
  /** Enables a bot */
  "bot-enable-bot": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the bot */
        botId: number;
      };
    };
    responses: {
      /** @description Bot already enabled */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Bot"];
            };
          };
        };
      };
      /** @description Bot enabled successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Bot"];
            };
          };
        };
      };
      /** @description Enabling bot errored */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Disables a bot */
  "bot-disable-bot": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the bot */
        botId: number;
      };
    };
    responses: {
      /** @description Bot disabled successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Bot"];
            };
          };
        };
      };
      /** @description Disabling bot errored */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Configure the breakout rooms */
  "breakout_room-configure-breakout-rooms": {
    parameters: {
      query: {
        /** @description Mode of the breakout rooms */
        mode: 0 | 1 | 2 | 3;
        /** @description Number of breakout rooms - Constants {@see BreakoutRoom::MINIMUM_ROOM_AMOUNT} and {@see BreakoutRoom::MAXIMUM_ROOM_AMOUNT} */
        amount: number;
        /** @description Mapping of the attendees to breakout rooms */
        attendeeMap?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Breakout rooms configured successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
      /** @description Configuring breakout rooms errored */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Remove the breakout rooms */
  "breakout_room-remove-breakout-rooms": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Breakout rooms removed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
    };
  };
  /** Broadcast a chat message to all breakout rooms */
  "breakout_room-broadcast-chat-message": {
    parameters: {
      query: {
        /** @description Message to broadcast */
        message: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Chat message broadcasted successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
      /** @description Broadcasting chat message is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
      /** @description Chat message too long */
      413: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Apply an attendee map to the breakout rooms */
  "breakout_room-apply-attendee-map": {
    parameters: {
      query: {
        /** @description JSON encoded mapping of the attendees to breakout rooms `array<int, int>` */
        attendeeMap: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Attendee map applied successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
      /** @description Applying attendee map is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Request assistance */
  "breakout_room-request-assistance": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Assistance requested successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Requesting assistance is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Reset the request for assistance */
  "breakout_room-reset-request-for-assistance": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Request for assistance reset successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Resetting the request for assistance is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Start the breakout rooms */
  "breakout_room-start-breakout-rooms": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Breakout rooms started successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
      /** @description Starting breakout rooms is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Stop the breakout rooms */
  "breakout_room-stop-breakout-rooms": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Breakout rooms stopped successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
      /** @description Stopping breakout rooms is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Switch to another breakout room */
  "breakout_room-switch-breakout-room": {
    parameters: {
      query: {
        /** @description Target breakout room */
        target: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Switched to breakout room successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Switching to breakout room is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Get the peers for a call */
  "call-get-peers-for-call": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description List of peers in the call returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["CallPeer"][];
            };
          };
        };
      };
    };
  };
  /** Update the in-call flags */
  "call-update-call-flags": {
    parameters: {
      query: {
        /** @description New flags */
        flags: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description In-call flags updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating in-call flags is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Call session not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Join a call */
  "call-join-call": {
    parameters: {
      query?: {
        /** @description In-Call flags */
        flags?: number | null;
        /** @description In-call permissions */
        forcePermissions?: number | null;
        /** @description Join the call silently */
        silent?: 0 | 1;
        /** @description When the user ticked a checkbox and agreed with being recorded (Only needed when the `config => call => recording-consent` capability is set to {@see RecordingService::CONSENT_REQUIRED_YES} or the capability is {@see RecordingService::CONSENT_REQUIRED_OPTIONAL} and the conversation `recordingConsent` value is {@see RecordingService::CONSENT_REQUIRED_YES} ) */
        recordingConsent?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Call joined successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description No recording consent was given */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
      /** @description Call not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Leave a call */
  "call-leave-call": {
    parameters: {
      query?: {
        /** @description whether to also terminate the call for all participants */
        all?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Call left successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Call session not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Ring an attendee */
  "call-ring-attendee": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
        /** @description ID of the attendee to ring */
        attendeeId: number;
      };
    };
    responses: {
      /** @description Attendee rang successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Ringing attendee is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Attendee could not be found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Call a SIP dial-out attendee */
  "call-sip-dial-out": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
        /** @description ID of the attendee to call */
        attendeeId: number;
      };
    };
    responses: {
      /** @description Dial-out initiated successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
                message?: string;
              };
            };
          };
        };
      };
      /** @description SIP dial-out not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
                message?: string;
              };
            };
          };
        };
      };
      /** @description Participant could not be found or is a wrong type */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
                message?: string;
              };
            };
          };
        };
      };
      /** @description SIP dial-out is not configured on the server */
      501: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Receives chat messages from the given room
   * @description - Receiving the history ($lookIntoFuture=0): The next $limit messages after $lastKnownMessageId will be returned. The new $lastKnownMessageId for the follow up query is available as `X-Chat-Last-Given` header.
   * - Looking into the future ($lookIntoFuture=1): If there are currently no messages the response will not be sent immediately. Instead, HTTP connection will be kept open waiting for new messages to arrive and, when they do, then the response will be sent. The connection will not be kept open indefinitely, though; the number of seconds to wait for new messages to arrive can be set using the timeout parameter; the default timeout is 30 seconds, maximum timeout is 60 seconds. If the timeout ends a successful but empty response will be sent. If messages have been returned (status=200) the new $lastKnownMessageId for the follow up query is available as `X-Chat-Last-Given` header.
   * The limit specifies the maximum number of messages that will be returned, although the actual number of returned messages could be lower if some messages are not visible to the participant. Note that if none of the messages are visible to the participant the returned number of messages will be 0, yet the status will still be 200. Also note that `X-Chat-Last-Given` may reference a message not visible and thus not returned, but it should be used nevertheless as the $lastKnownMessageId for the follow-up query.
   */
  "chat-receive-messages": {
    parameters: {
      query: {
        /** @description Polling for new messages (1) or getting the history of the chat (0) */
        lookIntoFuture: 0 | 1;
        /** @description Number of chat messages to receive (100 by default, 200 at most) */
        limit?: number;
        /** @description The last known message (serves as offset) */
        lastKnownMessageId?: number;
        /** @description The last known common read message (so the response is 200 instead of 304 when it changes even when there are no messages) */
        lastCommonReadId?: number;
        /** @description Number of seconds to wait for new messages (30 by default, 30 at most) */
        timeout?: number;
        /** @description Automatically set the last read marker when 1, if your client does this itself via chat/{token}/read set to 0 */
        setReadMarker?: 0 | 1;
        /** @description Include the $lastKnownMessageId in the messages when 1 (default 0) */
        includeLastKnown?: 0 | 1;
        /** @description When the user status should not be automatically set to online set to 1 (default 0) */
        noStatusUpdate?: 0 | 1;
        /** @description Set to 0 when notifications should not be marked as read (default 1) */
        markNotificationsAsRead?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Messages returned */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
          "X-Chat-Last-Given"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"][];
            };
          };
        };
      };
      /** @description No messages */
      304: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Sends a new chat message to the given room
   * @description The author and timestamp are automatically set to the current user/guest and time.
   */
  "chat-send-message": {
    parameters: {
      query: {
        /** @description the message to send */
        message: string;
        /** @description for guests */
        actorDisplayName?: string;
        /** @description for the message to be able to later identify it again */
        referenceId?: string;
        /** @description Parent id which this message is a reply to */
        replyTo?: number;
        /** @description If sent silent the chat message will not create any notifications */
        silent?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Message sent successfully */
      201: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"];
            };
          };
        };
      };
      /** @description Sending message is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Actor not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message too long */
      413: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Mention rate limit exceeded (guests only) */
      429: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Clear the chat history */
  "chat-clear-history": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description History cleared successfully */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessage"];
            };
          };
        };
      };
      /** @description History cleared successfully, but Matterbridge is configured, so the information can be replicated elsewhere */
      202: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessage"];
            };
          };
        };
      };
      /** @description Missing permissions to clear history */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Edit a chat message */
  "chat-edit-message": {
    parameters: {
      query: {
        /** @description the message to send */
        message: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Message edited successfully */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"];
            };
          };
        };
      };
      /** @description Message edited successfully, but a bot or Matterbridge is configured, so the information can be replicated to other services */
      202: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"];
            };
          };
        };
      };
      /** @description Editing message is not possible, e.g. when the new message is empty or the message is too old */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
      /** @description Missing permissions to edit message */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Editing this message type is not allowed */
      405: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message too long */
      413: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Delete a chat message */
  "chat-delete-message": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Message deleted successfully */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"];
            };
          };
        };
      };
      /** @description Message deleted successfully, but a bot or Matterbridge is configured, so the information can be replicated elsewhere */
      202: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"];
            };
          };
        };
      };
      /** @description Deleting message is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Missing permissions to delete message */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Deleting this message type is not allowed */
      405: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get the context of a message */
  "chat-get-message-context": {
    parameters: {
      query?: {
        /** @description Number of chat messages to receive in both directions (50 by default, 100 at most, might return 201 messages) */
        limit?: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description The focused message which should be in the "middle" of the returned context */
        messageId: number;
      };
    };
    responses: {
      /** @description Message context returned */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
          "X-Chat-Last-Given"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"][];
            };
          };
        };
      };
      /** @description No messages */
      304: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get the reminder for a chat message */
  "chat-get-reminder": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Reminder returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatReminder"];
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
    };
  };
  /** Set a reminder for a chat message */
  "chat-set-reminder": {
    parameters: {
      query: {
        /** @description Timestamp of the reminder */
        timestamp: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Reminder created successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatReminder"];
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
    };
  };
  /** Delete a chat reminder */
  "chat-delete-reminder": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Reminder deleted successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
    };
  };
  /** Set the read marker to a specific message */
  "chat-set-read-marker": {
    parameters: {
      query?: {
        /** @description ID if the last read message (Optional only with `chat-read-last` capability) */
        lastReadMessage?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Read marker set successfully */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
    };
  };
  /** Mark a chat as unread */
  "chat-mark-unread": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Read marker set successfully */
      200: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
    };
  };
  /** Search for mentions */
  "chat-mentions": {
    parameters: {
      query: {
        /** @description Text to search for */
        search: string;
        /** @description Maximum number of results */
        limit?: number;
        /** @description Include the user statuses */
        includeStatus?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description List of mention suggestions returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMentionSuggestion"][];
            };
          };
        };
      };
    };
  };
  /** Get objects that are shared in the room */
  "chat-get-objects-shared-in-room": {
    parameters: {
      query: {
        /** @description Type of the objects */
        objectType: string;
        /** @description ID of the last known message */
        lastKnownMessageId?: number;
        /** @description Maximum number of objects */
        limit?: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description List of shared objects messages returned */
      200: {
        headers: {
          "X-Chat-Last-Given"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessage"][];
            };
          };
        };
      };
    };
  };
  /**
   * Sends a rich-object to the given room
   * @description The author and timestamp are automatically set to the current user/guest and time.
   */
  "chat-share-object-to-chat": {
    parameters: {
      query: {
        /** @description Type of the object */
        objectType: string;
        /** @description ID of the object */
        objectId: string;
        /** @description Additional metadata */
        metaData?: string;
        /** @description Guest name */
        actorDisplayName?: string;
        /** @description Reference ID */
        referenceId?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Object shared successfully */
      201: {
        headers: {
          "X-Chat-Last-Common-Read"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["ChatMessageWithParent"];
            };
          };
        };
      };
      /** @description Sharing object is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Actor not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message too long */
      413: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get objects that are shared in the room overview */
  "chat-get-objects-shared-in-room-overview": {
    parameters: {
      query?: {
        /** @description Maximum number of objects */
        limit?: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description List of shared objects messages of each type returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                [key: string]: components["schemas"]["ChatMessage"][];
              };
            };
          };
        };
      };
    };
  };
  /**
   * Get the token of the room associated to the given file id
   * @description This is the counterpart of self::getRoomByShareToken() for file ids instead of share tokens, although both return the same room token if the given file id and share token refer to the same file.
   * If there is no room associated to the given file id a new room is created; the new room is a public room associated with a "file" object with the given file id. Unlike normal rooms in which the owner is the user that created the room these are special rooms without owner (although self joined users with direct access to the file become persistent participants automatically when they join until they explicitly leave or no longer have access to the file).
   * In any case, to create or even get the token of the room, the file must be shared and the user must be the owner of a public share of the file (like a link share, for example) or have direct access to that file; an error is returned otherwise. A user has direct access to a file if she has access to it (or to an ancestor) through a user, group, circle or room share (but not through a link share, for example), or if she is the owner of such a file.
   */
  "files_integration-get-room-by-file-id": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description ID of the file */
        fileId: string;
      };
    };
    responses: {
      /** @description Room token returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                token: string;
              };
            };
          };
        };
      };
      /** @description Rooms not allowed for shares */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Share not found */
      404: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /**
   * Returns the token of the room associated to the file of the given share token
   * @description This is the counterpart of self::getRoomByFileId() for share tokens instead of file ids, although both return the same room token if the given file id and share token refer to the same file.
   * If there is no room associated to the file id of the given share token a new room is created; the new room is a public room associated with a "file" object with the file id of the given share token. Unlike normal rooms in which the owner is the user that created the room these are special rooms without owner (although self joined users with direct access to the file become persistent participants automatically when they join until they explicitly leave or no longer have access to the file).
   * In any case, to create or even get the token of the room, the file must be publicly shared (like a link share, for example); an error is returned otherwise.
   * Besides the token of the room this also returns the current user ID and display name, if any; this is needed by the Talk sidebar to know the actual current user, as the public share page uses the incognito mode and thus logged-in users as seen as guests.
   */
  "files_integration-get-room-by-share-token": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Token of the file share */
        shareToken: string;
      };
    };
    responses: {
      /** @description Room token and user info returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                token: string;
                userId: string;
                userDisplayName: string;
              };
            };
          };
        };
      };
      /** @description Rooms not allowed for shares */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Share not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Set the display name as a guest */
  "guest-set-display-name": {
    parameters: {
      query: {
        /** @description New display name */
        displayName: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Display name updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Not a guest */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Not a participant */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get bridge information of one room */
  "matterbridge-get-bridge-of-room": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Return list of configured bridges */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["MatterbridgeWithProcessState"];
            };
          };
        };
      };
    };
  };
  /** Edit bridge information of one room */
  "matterbridge-edit-bridge-of-room": {
    parameters: {
      query: {
        /** @description If the bridge should be enabled */
        enabled: 0 | 1;
        /** @description New parts */
        parts?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Bridge edited successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["MatterbridgeProcessState"];
            };
          };
        };
      };
      /** @description Editing bridge is not possible */
      406: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Delete bridge of one room */
  "matterbridge-delete-bridge-of-room": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Bridge deleted successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: boolean;
            };
          };
        };
      };
      /** @description Deleting bridge is not possible */
      406: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Get bridge process information */
  "matterbridge-get-bridge-process-state": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Return list of running processes */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["MatterbridgeProcessState"];
            };
          };
        };
      };
    };
  };
  /** Create a poll */
  "poll-create-poll": {
    parameters: {
      query: {
        /** @description Question of the poll */
        question: string;
        /** @description Options of the poll */
        "options[]": string[];
        /** @description Mode how the results will be shown */
        resultMode: 0 | 1;
        /** @description Number of maximum votes per voter */
        maxVotes: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Poll created successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Poll"];
            };
          };
        };
      };
      /** @description Creating poll is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get a poll */
  "poll-show-poll": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the poll */
        pollId: number;
      };
    };
    responses: {
      /** @description Poll returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Poll"];
            };
          };
        };
      };
      /** @description Poll not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Vote on a poll */
  "poll-vote-poll": {
    parameters: {
      query?: {
        /** @description IDs of the selected options */
        "optionIds[]"?: number[];
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the poll */
        pollId: number;
      };
    };
    responses: {
      /** @description Voted successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Poll"];
            };
          };
        };
      };
      /** @description Voting is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Poll not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Close a poll */
  "poll-close-poll": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the poll */
        pollId: number;
      };
    };
    responses: {
      /** @description Poll closed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Poll"];
            };
          };
        };
      };
      /** @description Poll already closed */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Missing permissions to close poll */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Poll not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      500: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Creates a new room for video verification (requesting the password of a share)
   * @description The new room is a public room associated with a "share:password" object with the ID of the share token. Unlike normal rooms in which the owner is the user that created the room these are special rooms always created by a guest or user on behalf of a registered user, the sharer, who will be the owner of the room.
   * The share must have "send password by Talk" enabled; an error is returned otherwise.
   */
  "files_integration-create-room": {
    parameters: {
      query: {
        /** @description Token of the file share */
        shareToken: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Room created successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                token: string;
                name: string;
                displayName: string;
              };
            };
          };
        };
      };
      /** @description Share not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get a list of reactions for a message */
  "reaction-get-reactions": {
    parameters: {
      query?: {
        /** @description Emoji to filter */
        reaction?: string | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Reactions returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                [key: string]: components["schemas"]["Reaction"][];
              };
            };
          };
        };
      };
      /** @description Message or reaction not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Add a reaction to a message */
  "reaction-react": {
    parameters: {
      query: {
        /** @description Emoji to add */
        reaction: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Reaction already existed */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                [key: string]: components["schemas"]["Reaction"][];
              };
            };
          };
        };
      };
      /** @description Reaction added successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                [key: string]: components["schemas"]["Reaction"][];
              };
            };
          };
        };
      };
      /** @description Adding reaction is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Delete a reaction from a message */
  "reaction-delete": {
    parameters: {
      query: {
        /** @description Emoji to remove */
        reaction: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
        /** @description ID of the message */
        messageId: number;
      };
    };
    responses: {
      /** @description Reaction deleted successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                [key: string]: components["schemas"]["Reaction"][];
              };
            };
          };
        };
      };
      /** @description Deleting reaction is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Message not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Start the recording */
  "recording-start": {
    parameters: {
      query: {
        /** @description Type of the recording */
        status: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Recording started successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Starting recording is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Stop the recording */
  "recording-stop": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Recording stopped successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Stopping recording is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Dismiss the store call recording notification */
  "recording-notification-dismiss": {
    parameters: {
      query: {
        /** @description Timestamp of the notification to be dismissed */
        timestamp: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Notification dismissed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Dismissing notification is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Share the recorded file to the chat */
  "recording-share-to-chat": {
    parameters: {
      query: {
        /** @description ID of the file */
        fileId: number;
        /** @description Timestamp of the notification to be dismissed */
        timestamp: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        token: string;
      };
    };
    responses: {
      /** @description Recording shared to chat successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Sharing recording to chat is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Get all currently existent rooms which the user has joined */
  "room-get-rooms": {
    parameters: {
      query?: {
        /** @description When the user status should not be automatically set to online set to 1 (default 0) */
        noStatusUpdate?: 0 | 1;
        /** @description Include the user status */
        includeStatus?: 0 | 1;
        /** @description Filter rooms modified after a timestamp */
        modifiedSince?: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
      };
    };
    responses: {
      /** @description Return list of rooms */
      200: {
        headers: {
          "X-Nextcloud-Talk-Hash"?: string;
          "X-Nextcloud-Talk-Modified-Before"?: string;
          "X-Nextcloud-Talk-Federation-Invites"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
    };
  };
  /** Create a room with a user, a group or a circle */
  "room-create-room": {
    parameters: {
      query: {
        /** @description Type of the room */
        roomType: number;
        /** @description User, group, … ID to invite */
        invite?: string;
        /** @description Name of the room */
        roomName?: string;
        /** @description Source of the invite ID ('circles' to create a room with a circle, etc.) */
        source?: string;
        /** @description Type of the object */
        objectType?: string;
        /** @description ID of the object */
        objectId?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
      };
    };
    responses: {
      /** @description Room already existed */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Room created successfully */
      201: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Room type invalid */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
      /** @description Missing permissions to create room */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description User, group or other target to invite was not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get listed rooms with optional search term */
  "room-get-listed-rooms": {
    parameters: {
      query?: {
        /** @description search term */
        searchTerm?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
      };
    };
    responses: {
      /** @description Return list of matching rooms */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
    };
  };
  /**
   * Get the "Note to self" conversation for the user
   * @description It will be automatically created when it is currently missing
   */
  "room-get-note-to-self-conversation": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
      };
    };
    responses: {
      /** @description Room returned successfully */
      200: {
        headers: {
          "X-Nextcloud-Talk-Hash"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
    };
  };
  /** Get a room */
  "room-get-single-room": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        /** @description Token of the room */
        token: string;
      };
    };
    responses: {
      /** @description Room returned */
      200: {
        headers: {
          "X-Nextcloud-Talk-Hash"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description SIP request invalid */
      401: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Room not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Rename a room */
  "room-rename-room": {
    parameters: {
      query: {
        /** @description New name */
        roomName: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Room renamed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Renaming room is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Delete a room */
  "room-delete-room": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Room successfully deleted */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Deleting room is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Get breakout rooms
   * @description All for moderators and in case of "free selection", or the assigned breakout room for other participants
   */
  "room-get-breakout-rooms": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Breakout rooms returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"][];
            };
          };
        };
      };
      /** @description Getting breakout rooms is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
    };
  };
  /** Allowed guests to join conversation */
  "room-make-public": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Allowed guests successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Allowing guests is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Disallowed guests to join conversation */
  "room-make-private": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Room unpublished Disallowing guests successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Disallowing guests is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update the description of a room */
  "room-set-description": {
    parameters: {
      query: {
        /** @description New description */
        description: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Description updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating description is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Set read-only state of a room */
  "room-set-read-only": {
    parameters: {
      query: {
        /** @description New read-only state */
        state: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Read-only state updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating read-only state is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Make a room listable */
  "room-set-listable": {
    parameters: {
      query: {
        /** @description Scope where the room is listable */
        scope: 0 | 1 | 2;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Made room listable successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Making room listable is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Set a password for a room */
  "room-set-password": {
    parameters: {
      query: {
        /** @description New password */
        password: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Password set successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Setting password is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message?: string;
              };
            };
          };
        };
      };
      /** @description Setting password is not allowed */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update the permissions of a room */
  "room-set-permissions": {
    parameters: {
      query: {
        /** @description New permissions */
        permissions: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
        /** @description Level of the permissions ('call', 'default') */
        mode: "call" | "default";
      };
    };
    responses: {
      /** @description Permissions updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Updating permissions is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get a list of participants for a room */
  "room-get-participants": {
    parameters: {
      query?: {
        /** @description Include the user statuses */
        includeStatus?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Participants returned */
      200: {
        headers: {
          "X-Nextcloud-Has-User-Statuses"?: boolean;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Participant"][];
            };
          };
        };
      };
      /** @description Missing permissions for getting participants */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Add a participant to a room */
  "room-add-participant-to-room": {
    parameters: {
      query: {
        /** @description New participant */
        newParticipant: string;
        /** @description Source of the participant */
        source?: "users" | "groups" | "circles" | "emails" | "federated_users" | "phones";
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Participant successfully added */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: OneOf<[{
                /** Format: int64 */
                type: number;
              }, unknown[]]>;
            };
          };
        };
      };
      /** @description Adding participant is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
      /** @description User, group or other target to invite was not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description SIP dial-out is not configured */
      501: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get the breakout room participants for a room */
  "room-get-breakout-room-participants": {
    parameters: {
      query?: {
        /** @description Include the user statuses */
        includeStatus?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Breakout room participants returned */
      200: {
        headers: {
          "X-Nextcloud-Has-User-Statuses"?: boolean;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Participant"][];
            };
          };
        };
      };
      /** @description Getting breakout room participants is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
      /** @description Missing permissions to get breakout room participants */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Remove the current user from a room */
  "room-remove-self-from-room": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Participant removed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Removing participant is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Participant not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Remove an attendee from a room */
  "room-remove-attendee-from-room": {
    parameters: {
      query: {
        /** @description ID of the attendee */
        attendeeId: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Attendee removed successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Removing attendee is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Removing attendee is not allowed */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Attendee not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update the permissions of an attendee */
  "room-set-attendee-permissions": {
    parameters: {
      query: {
        /** @description ID of the attendee */
        attendeeId: number;
        /** @description Method of updating permissions ('set', 'remove', 'add') */
        method: "set" | "remove" | "add";
        /** @description New permissions */
        permissions: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Permissions updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating permissions is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Missing permissions to update permissions */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Attendee not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update the permissions of all attendees */
  "room-set-all-attendees-permissions": {
    parameters: {
      query: {
        /** @description Method of updating permissions ('set', 'remove', 'add') */
        method: "set" | "remove" | "add";
        /** @description New permissions */
        permissions: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Permissions updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Updating permissions is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Join a room */
  "room-join-room": {
    parameters: {
      query?: {
        /** @description Password of the room */
        password?: string;
        /** @description Create a new session if necessary */
        force?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        /** @description Token of the room */
        token: string;
      };
    };
    responses: {
      /** @description Room joined successfully */
      200: {
        headers: {
          "X-Nextcloud-Talk-Proxy-Hash"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Joining room is not allowed */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Room not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Session already exists */
      409: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                sessionId: string;
                /** Format: int64 */
                inCall: number;
                /** Format: int64 */
                lastPing: number;
              };
            };
          };
        };
      };
    };
  };
  /** Leave a room */
  "room-leave-room": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        /** @description Token of the room */
        token: string;
      };
    };
    responses: {
      /** @description Successfully left the room */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Resend invitations */
  "room-resend-invitations": {
    parameters: {
      query?: {
        /** @description ID of the attendee */
        attendeeId?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Invitation resent successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Attendee not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Set active state for a session */
  "room-set-session-state": {
    parameters: {
      query: {
        /** @description of the room */
        state: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Session state set successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description The provided new state was invalid */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description The participant did not have a session */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Promote an attendee to moderator */
  "room-promote-moderator": {
    parameters: {
      query: {
        /** @description ID of the attendee */
        attendeeId: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Attendee promoted to moderator successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Promoting attendee to moderator is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Promoting attendee to moderator is not allowed */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Attendee not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Demote an attendee from moderator */
  "room-demote-moderator": {
    parameters: {
      query: {
        /** @description ID of the attendee */
        attendeeId: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Attendee demoted from moderator successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Demoting attendee from moderator is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Demoting attendee from moderator is not allowed */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Attendee not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Add a room to the favorites */
  "room-add-to-favorites": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Successfully added room to favorites */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Remove a room from the favorites */
  "room-remove-from-favorites": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Successfully removed room from favorites */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update the notification level for a room */
  "room-set-notification-level": {
    parameters: {
      query: {
        /** @description New level */
        level: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Notification level updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating notification level is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update call notifications */
  "room-set-notification-calls": {
    parameters: {
      query: {
        /** @description New level */
        level: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Call notification level updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating call notification level is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update the lobby state for a room */
  "room-set-lobby": {
    parameters: {
      query: {
        /** @description New state */
        state: number;
        /** @description Timer when the lobby will be removed */
        timer?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Lobby state updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Updating lobby state is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update SIP enabled state */
  "room-setsip-enabled": {
    parameters: {
      query: {
        /** @description New state */
        state: 0 | 1 | 2;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description SIP enabled state updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Updating SIP enabled state is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description User not found */
      401: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Missing permissions to update SIP enabled state */
      403: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description SIP not configured */
      412: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Set recording consent requirement for this conversation */
  "room-set-recording-consent": {
    parameters: {
      query: {
        /** @description New consent setting for the conversation (Only {@see RecordingService::CONSENT_REQUIRED_NO} and {@see RecordingService::CONSENT_REQUIRED_YES} are allowed here.) */
        recordingConsent: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Recording consent requirement set successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Room"];
            };
          };
        };
      };
      /** @description Setting recording consent requirement is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error: string;
              };
            };
          };
        };
      };
      /** @description No recording server is configured */
      412: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Update message expiration time */
  "room-set-message-expiration": {
    parameters: {
      query: {
        /** @description New time */
        seconds: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Message expiration time updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating message expiration time is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                error?: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Get capabilities for a room
   * @description See "Capability handling in federated conversations" in https://github.com/nextcloud/spreed/issues/10680 to learn which capabilities should be considered from the local server or from the remote server.
   */
  "room-get-capabilities": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v4";
        token: string;
      };
    };
    responses: {
      /** @description Get capabilities successfully */
      200: {
        headers: {
          "X-Nextcloud-Talk-Hash"?: string;
          "X-Nextcloud-Talk-Proxy-Hash"?: string;
        };
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["Capabilities"] | unknown[];
            };
          };
        };
      };
    };
  };
  /** Update user setting */
  "settings-set-user-setting": {
    parameters: {
      query: {
        /** @description Key to update */
        key: "attachment_folder" | "read_status_privacy" | "typing_privacy" | "play_sounds";
        /** @description New value for the key */
        value?: string | number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description User setting updated successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Updating user setting is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get the signaling settings */
  "internal_signaling-external_signaling-get-settings": {
    parameters: {
      query?: {
        /** @description Token of the room */
        token?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v3";
      };
    };
    responses: {
      /** @description Signaling settings returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: components["schemas"]["SignalingSettings"];
            };
          };
        };
      };
      /** @description Recording request invalid */
      401: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Room not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
  /** Get signaling messages */
  "internal_signaling-pull-messages": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v3";
        /** @description Token of the room */
        token: string;
      };
    };
    responses: {
      /** @description Signaling messages returned */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: ({
                  type: string;
                  data: components["schemas"]["SignalingSession"][] | string;
                })[];
            };
          };
        };
      };
      /** @description Getting signaling messages is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: string;
            };
          };
        };
      };
      /** @description Session, room or participant not found */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: ({
                  type: string;
                  data: components["schemas"]["SignalingSession"][] | string;
                })[];
            };
          };
        };
      };
      /** @description Session killed */
      409: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: ({
                  type: string;
                  data: components["schemas"]["SignalingSession"][] | string;
                })[];
            };
          };
        };
      };
    };
  };
  /** Send signaling messages */
  "internal_signaling-send-messages": {
    parameters: {
      query: {
        /** @description JSON encoded messages */
        messages: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v3";
        /** @description Token of the room */
        token: string;
      };
    };
    responses: {
      /** @description Signaling message sent successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Sending signaling message is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: string;
            };
          };
        };
      };
    };
  };
  /** Upload your avatar as a user */
  "user_avatar-post-avatar": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Avatar uploaded successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Uploading avatar is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: {
                message: string;
              };
            };
          };
        };
      };
    };
  };
  /** Delete your avatar as a user */
  "user_avatar-delete-avatar": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
    };
    responses: {
      /** @description Avatar deleted successfully */
      200: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
      /** @description Deleting avatar is not possible */
      400: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: unknown;
            };
          };
        };
      };
    };
  };
};
